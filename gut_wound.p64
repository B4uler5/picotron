picotron cartridge // www.picotron.net
version 2

:: gfx/
:: map/
:: sfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
NS0zMCAyMzoxMToxMSIscmV2aXNpb249MjE2Nl1dbHo0ABcTAABDZAAA8xh7WzBdPXtibXA9cHh1
AEMgICAE-yD----zLGZsYWdzPTAscGFuX3gIAMx5PTAsem9vbT03fSw1AFUNHxcPEgcAnwwPFw8g
DxIPFwsAfmUNHxf-IA4FAB4NJQAPkwBhIw8gcQEfMXEBFvYBEa8XTyCvFz8gDxevEg8XLwgAdxKv
IA8SLxcIABsXCAAAGAAaIAgAAY8AHxcMAAAACgAeIAwADzAA--8PANQCHw8EACgPEAMcIg8SzgMe
EtUDDwsAewqoAA_vAHgCiwAPhwT-WlAPIPEBjicA8Q8ODQ8SAf0BAX4MDg0OAR3uHQFuDA0ODQEN
-gENAW4VAAMLAA8WAAdUDw39AQsXABX7FwAfCxYAAnMbLg1uDS4bGQC0Cy4NDg1ODQ4NLgs2AFQ_
DW4NPjkAMxvtGxgAAUMAJQ4NAgADLgIfMy4C-1Ql9wEuAkEH-QEHLgJRBx3uHQedARAHDQIRB7IB
BAsADxYABwEuAgQXABX7FwAfCxYAAgMuAgMZAAcuAgQ2AAIuAgMgADMb7RsYAAFDAC8ODS4CJR-w
iAodXxAQBPDwMQALHDllAKH-FxKvID8XzyAvZQERj2kBAbwGA30Bfx8XzyAfF_8IACAPUAADIi8X
cAAz-xck2gEPBAAAMi8X35EADxwAAgBNABG-TQCZ-xcA-yAALxefFgACbwARfwwAAkoAU78g-xcE
BQAEEgAZHzIAABAAP-8gAAkAIAhGAAp4AH8-F58g-xcSkgELHzZLDE9EDR8XAQYAQAw9-gwMBQ8G
AGAuDS1dBw8KAQpWDQ8gDQ4CAKH9I6FNoT0BrgEtBAATrQQAM64BLgQAAKIFBAYAALgFBAYADxgA
-T8dDg0CAAoPpwEMD3sKTREBSAACBgAHPwIPBgBgPy3_DQwBHPYfAR3vFx0BrQEO-QEOAZ8gDQEd
7B0BnA0BDTwObA48DQGtAQ0sDgwOTA4MDiwNwRYAAycAATcAQJwN8QUzAJZ8DQENLA0BDbwMAPYA
3QGdAU3xEd0B-QABHQwNAgB2AQ3cDQENDAIAER0SABLdGAARHAIAJCwNJgAADgASPA4AEB0MACBM
DVEAARcAQVwN8QIiABFsFAAhHRx7AAJFABWMQQASnAoAIx2sEgAfvAgAD2-9AAHd8RAMBRzzBw8X
He4dDq0e-QEenyANDh3sHQ6cDQ43ATcOrQ5NAScOoRgAAikAADcAP5wN-k0B9Q9QCBAfNlAIMRGP
_QYVP6sHHW8dBwIMAAAIABOvewcfLwwAIAhcAAIUADcvF4-bB1EPIO8Xv4QAE687CAAoAFN-F08g
LxAAMw8XvwgABKwAAFkLAhAABDAAFR8MABVvDAAXD8wABkAAF28MAAORCAs4ABffLAC0-xcJbyAv
F-8gAy8iAGQS-yABDxIzAD--IAUJAAULLAAFRgA2-xcJxQA0-xcEbgBRTyA-F__SABG-PAAZz7oA
AVAAGxcQAAMkAAAMABc-HAAUP9oJEBdhAB8RngolHzFOAgQPswIgDzQAAw9oACkPNAB5D4MDIfEC
AV0BXQEtAc0BDT8gDQENPg35ByUNrgwAPA8VDhQAIwweEgAzDg2OFAAUPhIAWAyODQFdSAAXcQwA
LgFdYgAEEABTTg0MPg2OANANTh0MLg3xAw1OHD4N7A8BLgAt7g0IABDNBgAT4QoAQ24NDF4bAFNu
DA0MTgwAFX4WAB-uCAA7T-0BAc1YBR4B4gAn-QFvARPuCAAABAAgTi0uDgYQAGcuHS8TDQwSAJId
Dg0cDR4MDU5MAZEdHA0MHgwuDE5nATAMDQ5LDhKeHAAgDQEpABkMowFILgwNDBAAGj4fABlOHQAf
7gwADyT9AQsALvEDFAABKwAA8AAHpQELRAFkDS4dDxWODABDCx0LfgwAJD4bFgAf7ggAD0-NAf0B
4gZPDzQAFA_TAx4PMQCNALYC8wT9CBFNAQ3-IAYNEQ0uDQENnh2eCgBkjg0fEw2ODQBQDB4MDR69
AwIQAFXODB0cDQ0ANQ0cHg0AY74dPgwNHg0AY64NHE4MLQwAUAx_HB0BCwCw-QccHS4N8QkNHC7j
ASOtASwAVgENfg0MDQARboUJBA4AZy4NDh0MDhEAEB5UCRceEQAwDg0MhwAHEQApDC4QAABJAwgx
AFkuDQwODBEAJwxODgAfjgwAFxTNCgAd4RIACygAP60BTdECDR81WwQAM70BrVoEE55OAAGKAycd
Pg4ASB4dHxMQAABSBBhOEAABRwQKIgBKDB4MPiMAGm4gAAMPAACCAHANjg2RDA2BDwAh-QMWAFIN
fg1_DQoAVR4NLh0MDQAArgQjHI4OABAOVwsDBQEA2AQSvgsAMD0M3QgAIPEFDQA0nQF9UgBPAQ1e
DQwAGhB9HAFAfg3xBg0AIf0EFABPDf4CDQkAAE_dAf0EfwEODxwEIB81ugMeDzEAvgCoAok9Ad0B
rQE9AbMRER2pASEdDgQABgIABQ4AEB0xABwOMAAACAAKMAAlDQ4CAA8yAAIAYgAV3TQAVB0BPfEA
SQA8jQE9PwARbrQCBTkAARAJA-cNER4TAARGAAEVA0YMDQwOMQAAGAAjDR48BC8eDVsADR5uVAAZ
jUwAXx0OLQ4dSgAAWQ4tDi0OTAAGEgAITgAHQAAPUgAaBBAAFj1OAAKOA0D9ASGtuQnyAh4dPh3h
DT4NDxMdGx0ODRvdTwCxCw4bDg0bDQsODQvdBJMOCx0uHQseCx7tBFIeGy4bXgwADksJD-AEEQA2
AE4BDe8gEQgPxwkcIA2uwAgFDAANIwAhDe6qBQ7GCA8IAEwPFwESD8EDHg_FBPVznQHtAQ0fIPgF
Es5-Aw8MAEEBaQAxHg3xVwgA_wQACAATDeAGDwwAZQGFBUDxEf0PbRccDQUAL-0PeAINHzSDAR4P
MQD--60f8jEAHS--HMUAHg8xAP--------------1fQVQK8XIB6YDhAOuA4ADsgOAA4YDyAIDRgN
CA0oHjgNOA04HigNEAAR2AIAMTgNCAIAECgtAAUMAABBAL8gDpgOQB5YHnBeQIYAPDUoDxiIALMI
HB6oLB6YPB6ITIwANQwNLIwA-wUMDTwOAA5IfA4QDiiMDiAenA5Aro0AIdNoLxgOEA54PQ4ADnhN
kQDxBAwYDA0MLR44DBgdDD0eKAwIDB0RANFIjR44nR4orR4YHQANAgA0LR4ICwAwPR7dAgAv-gGG
ABx0-xcB3xgfFwQAky8YDyAPGA8gHwgAgi8YHxc-GA8gBAAPIAADF98EABM-GAAXDyAABDQABAQA
Fz8wAE-fGP8XswAatHcGBP8XaP8gZR8XBQC8DxcADv8gYw4g-mO3EfMALTQuMDU5NTIzODA5NTI0
WQCiLTguNzE5MDQ3NgYAAmgAHzLlAh0vMTAyAGEBNwLxC58eDhAOvQ4ADs0OAA4dB10HLR4dJz0n
HR4tDAAACwIwDb8g-xv_CpcMDQ4ADg0MdwwNDhAOHXwdDiAOnQ5AHl0-Aw98ADGAHQIevRIerSJ-
ABECfwATAn8AEBIuAM58Ig4QDj1yDiAeDYIyAw_AABMgbx5FAHF9Mg4ADn1CgwD3CT0SByIeHScd
EicSHi0HHTIHIh5Ngh49koUAIB4dgwC-Hg0SfCIe0h7S-gF7AB1A-xcB0joAwx4iB1IHIh4SJzIn
EgwAABYAEAJqAO8CDZcNAh4SDXcNEh4ifWkAIS13RN4CDwUA-yQOFAQOggEP9wOf8gucDhAOvA4A
Djw-IEwOAA4sDTwNPB48XTwePAoACAYAARYAIT8QqAb_BCwNOw0sDhAOPD08DiAOnA5AHlz-Aw_E
ADExLA8QCAAhHBsHAMMMKx48XTsePA07DTuHAAAIAM88PUsOEA4siw4gHpsGBCWCfB8QDhAOjC2K
ABAMQQeyLAs8Cz0ePFs9HjwKAAcGAOEsDVs9HhwdCz0LPR4MLQcAPk07TTIHDwsEFEDfEB8XBADx
AE8QPyBPEB8XPxAPIDwOPwoAqV49Hxc9DjwOPRsGABBeCgAkPQ4GAJ9NPk0b3Rvd_wFtAh8PMgCz
AcYB9wWbDhAOuw4ADksvIEsOAA5bDVseawQA-hxbDQkNSx5LDSkNOx47DUkNKw4ADisNSQ0bDhAO
Ow0pDSsOIA47LSsOQB5b0AIPgwAtcUsDHmsNOxOFACEbI4YAETOGABMjhgAACAAAhgDPMw4QDisD
LUMOIB6TzwIlcnsTDhAOiyOIACELM4kAYQtDHmsNUwQA4VsDDVMeSwMNCQ1DHjsDigAgKwODADEe
GxMHACELMxUAX1MtQx7T0gIiydMe0x5TLyBDHmMNUwQAEVN1ABFDXwARM2wAAgYAH0NxACkv8PAy
ALMBvAHxEZoOEA66DgAOyg4ADloPIFoeWg0KDUoeag1aHtoeOg0KAgCVKh4qjRoeGg0IAgCzCg4A
DhqNCg4QDiokAJ4aDiAOmg5AHlrNAg_LACm1Og8ZHmoNOhweqiyPAFksHiqNHI8AEQyPADEcDgCP
ABEM7gw_EA4q3QwPjwAYcHofGQ4QDoqlBSKKPZMA8QIKTR5aDAoMTR5qDF0eWn0eOjkiAN8MdSqM
HR4aDAgCAJUNHhoNjB0eCi0iAA_uBSY0GR8XBAD3Am8ZDyBfGR8XXxkPIA8ZDyBPFAAAIAATPxgA
BAQA9AMvGR8XLxmPIB8ZHxcfGQ8gCA4CABEPGgAgjh3uBQHzIX8OLRzdHN38DQPr9QqXDhAOtw4A
DlcIVw4ADkcoRx5XKEceR0g3BAAAEAARZx4AEbcsAH4gDpcOQB5X9AIPcgAs8AcnDxIeR0gXHR5H
SActHlcoBz0eZwgHZQ8gZ10vAL9tDhAON30OIB4HjeACJYF3HxIOEA6HLX4AIRc9fwCVTR5XKE0e
R0g9BAD-ADcdKE0eJz0IXR4XvR4HzccCJzASHxcEAKBvEgheHxdeKE4dBAA1Tkg_BAAAEABSbghe
Hd4CAB-9iwIgDzIA----C-8RCAgEIBZQF0APHA8QHxwgDi8QHhAeDS4QFw0nEF4QXgBNAB7yBB8g
UAUPFUAFLiAFDgcuEAUnHhAJAAEFAB9OUQAf8gIWQAYQBmAGEBcQBiAHAAcQBwYAEAACAE8XIAdQ
UQAd-wtAKDA4IAcoDxgQJwgOEDcGEDcGICcGMBcGQGsBPR82MQBdXxIE8P8RMgAc8CAwfxdgDnEO
QA6RDiAOERUBRREOEA4BBQ8WDyAFLxYPIA8WBQEOEA4FHQ8gPQwdBR0AUB0FPQUdFQAwEX0RNQDw
AV0RDjAOAnECDiAOAh8VURseE_ACGx0fGAsdKwIeKy0KLSEP-xAbFQgbFSsOIB5xHkAOcQ5QDiEe
IQ5gDxMfERAZDxMwtwB2QAgPGFu2ADEIClu2ANAKOy0FDhAecQ0FDjAOvAAPuAAqL-AEcAFiD7QA
QxAgtgAiHxYIAAK3AAAOABE-FgABuwChDQ8gBQwdDAUMDcAAfwUNBR0FDQXGAGAOfQMPMQBuD64D
LjuxDhAEADAgDpFVASF-FVYBEZ1TAYy9Ah7dDgAOvXoDXy8TECwwfwBWEZ0RAkgecQwFRgNPLxMQ
K44CHw8EAS4OAAEPfACODo8CDzEAnwdAAjCBDjBJBEQFQQ4g-QRxDxYBDSEOIPoEMB0BBQsAQAEd
BR0iADARPUEwAJEtMQ5ADgIxHxU6BDAcEUxlAWAcHQ8YHTx7FRBNCBbAHBUIFSwOQB5hDmAOBACg
IQ4hDnAfEQ8TAAUAH0CyPAwPsABBIFECBgBSHxUxHAKwAFAIDxg8ArEAMi0IC7MAzwscLQUOMB5R
DQUOULYAMC-wBGcBWg_tAEQBVQYPrgABUQ0MBQwNsABPBQ0FDbMAADAbEUuzABAbswAQO8gUQE07
DiBKBi8VK7MAIg8oAx4PMQCOD4oDYgFsARGABQAPrQCEsFAOYWAOQQ4BDxNgIgKfDxFQGw8TUAtA
XAGMAsoCPiEOsM0CD1wBeiEOUGUAUCE_IQ5AqwA-MB8Rxwk-LzEwMgCRB3gBAEoID3gNWgBBC04e
IQ6wRAsPtgCJICEeLgJvDmAJHxGAtgAdL-AEtwkuIC8TMwEvLDB7AGCPIR4vEw5gLIDGAh8PMgCx
C3QCD0IBBUGfFQ4gwSMR3TwBMJ0vFm4MEBxvBCAeIcABnxEeKw5gLhAuMH8AnC-wBIAAIAW2Aj8R
Hix3AJgOUAIPMgCjCzUCUBEfFgFNKQUQLRYFEC0JABIMCAAsAZ0ZBZEPFXELDiAOK1EXIAAsDBZr
jBJAHQo7PVgCGB1YAh4p4QEPogCzL-AEowA0AFsGFjtaBkQdCBsdWgYPngA_QR0PIA3bKhgdogAi
DQwVAB8NqgBfD74CDx82MQCOD64CKRETYQFwDxULClELGgkgALICsCoLKh4qLQgJCgs6IiC5HQkq
Cz0OEA4LYQu5Ah4ncQEPrAC8L-AErQAsNB8VC6wAoh8YCh06HiotCS2pAL8IGh0qDiAOC3ELDqIA
PwJoAzMADQBoAxYAaAMAOy4PrgBSUG09Nn19
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
NS0zMCAyMzoxMToxMSJdXWx6NAAEAAAAAwAAADBuaWw=
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
NS0zMCAyMzoxMToxMSIscmV2aXNpb249MjAxMF1dbHo0ANkAAAB2EAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD-AF8xMDAwMgQAABM0CAAvMzCAAE4AYwATMggAojE5MDAyOTAwMGMQ
AA_AAFEAcABmMjgwMDE4jAAjMTiIAA_AAFAmMTl4ABMzdwEAfAAfMYAAUQBkAB9hBAAIL2IwAQD-
---------------E9Q0iKSxoaWRkZW49ZmFsc2UscGFuX3g9LTE5MS42AQARNxcAo3k9LTQxMy41
ODMBALI0LHRpbGVfaD0zMgoAEHcKAIB6b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
NS0zMCAyMzoxMToxMSJdXWx6NAAEAAAAAwAAADBuaWw=
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
NS0zMCAyMzoxMToxMSIscmV2aXNpb249MTg1OV1dbHo0ACcBAADtFwAA-yxweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAUGBwAP-5AICQoLDwwPDQ8ODw8AD--w-wEA6-8n0gEQBg8g
EAEgASAB8AACEAIMEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMMAAcIg9AMQCD
D2-gAhACDz0zAE-wxw9CYgAdDzAA------9FH-8BAKz-XcgPQAACQB8TDxQPFQ8WDxcPGA8aDx0M
DyQPKQ8vDzMPOA88D0EPRQ9IH0oPRw9FD0EPPw89DzcPMg8vDywPKP--EfIP-hEPPQ8-X0BfPw8_
Dz1PPB87HzovOV84DzkeAf4K8HAPQAAPEED_sAoA--------------------fFD_sPD-OQ==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
NS0zMCAyMzoxMToxMSJdXWx6NAAEAAAAAwAAADBuaWw=
:: character.lua
--[[pod_format="raw",created="2024-05-05 22:21:00",modified="2024-05-30 23:11:11",revision=1985]]
include './types.lua'
include './collision.lua'

--object, start frame,
--num frames, speed, flip
function animate_character(o, sf, nf, sp, fl)
	if(not o.a_la) o.a_la = sf
	if(not o.a_ct) o.a_ct = 0
	if(not o.a_st) o.a_st = 0
	if(not o.fl) o.fl = false
	o.a_ct += 1
	if o.a_ct % (30/sp) == 0 then
	 o.a_st += 1
	 if(o.a_st == nf) o.a_st = 0
	elseif o.a_la != sf then
	o.a_st = 0
	end

	o.a_fr = sf + o.a_st
	spr(o.a_fr, o.x, o.y, fl)
	o.a_la = sf
end

character=entity:new({
    	x=160,
    	y=135,
    	max_width = 16,
    	max_height = 18,
    	col_point = { x=0, y=0 },
		i_dir = direction.up,
		spd=0.65,
		health = 10,
		wound_health = 51,
		pain = 40,
		hunger = 40,
		thirst = 31,
		delirium = 50,
		d_i_f = {sf = 196, nf = 4, s = 1, fl = false},
		u_i_f = {sf = 204, nf = 4, s = 1, fl = false},
		l_i_f = {sf = 212, nf = 4, s = 1, fl = false},
		r_i_f = {sf = 212, nf = 4, s = 1, fl = true},
		d_m_f = {sf = 228, nf = 2, s = 2, fl = false},
		u_m_f = {sf = 230, nf = 2, s = 2, fl = false},
		l_m_f = {sf = 220, nf = 4, s = 2, fl = false},
		r_m_f = {sf = 220, nf = 4, s = 2, fl = true},
		state = "idle",
	update_vitals = function(self)
		if self.state == "idle" and self.health < 70 then
			last_update_move, current_update = 0, time_since(start_idle, time())
			if current_update != last_update_idle then
				last_update_idle = current_update
				self.health += 0.05
				self.hunger += 0.01
				self.thirst += 0.02
				if self.wound_health < 50 then
					self.wound_health += 0.01
				end
				if self.pain > 50 then
					self.pain -= 0.05
				end
			end
		end
		if self.state == "moving" then
			last_update_idle, current_update = 0, time_since(start_move, time())
			if current_update != last_update_move then
				last_update_move = current_update
				self.health -= 0.65
				self.wound_health -= 0.25
				self.pain += 0.1
				self.hunger += 0.1
				self.thirst += 0.1
			end
		end
		if self.health < 50 
			and self.wound_health < 50 
			and self.pain > 70 
			and self.hunger > 50 
			and self.thirst > 50 then
			last_update_idle, current_update = 0, time_since(start_move, time())
			if current_update != last_update_move then
				last_update_move = current_update
				self.delirium += 0.1
			end
		end
	end,
	move = function(self)
		_btn = btn()
		if _btn != button.none then
			self.state, start_move = "moving", time()
			self.col_point = { x = (self.x+(self.max_width/2)), y = (self.y+(self.max_height/2)) }
			if _btn == button.down_right then
				self.i_dir = direction.down
				self.col_point = { x = self.x+self.max_width, y = self.y+self.max_height}
				if collide(self,button.down_right) == false then
					self.y, self.x = self.y + (0.50 * self.spd), self.x + (1 * self.spd)
				end
			elseif _btn == button.up_left then
				self.i_dir = direction.up
				self.col_point = { x = self.x, y = self.y}
				if collide(self,button.up_left) == false then
					self.y, self.x = self.y - (0.50 * self.spd), self.x - (1 * self.spd)
				end
			elseif _btn == button.up_right then
				self.i_dir = direction.up
				self.col_point = { x = self.x+self.max_width, y = self.y }
				if collide(self,button.up_right) == false then
					self.y, self.x = self.y - (0.50 * self.spd), self.x + (1 * self.spd)
				end
			elseif _btn == button.down_left then
				self.i_dir = direction.down
				self.col_point = { x = self.x, y = self.y+self.max_height}
				if collide(self,button.down_left) == false then
					self.y, self.x = self.y + (0.50 * self.spd), self.x - (1 * self.spd)
				end
			elseif _btn == button.right then
				self.i_dir = direction.right
				self.col_point = { x = self.x+self.max_width, y = self.y+(self.max_height/2)}
				if collide(self,button.right) == false then
					self.x = self.x + (1 * self.spd)
				end
			elseif _btn == button.left then
				self.i_dir = direction.left
				self.col_point =  { x = self.x, y = self.y+(self.max_height/2)}
				if collide(self,button.left) == false then
					self.x = self.x - (1 * self.spd)
				end
			elseif _btn == button.down then
				self.i_dir = direction.down
				self.col_point = { x = self.x+(self.max_width/2), y = self.y+self.max_height}
				if collide(self,button.down) == false then
					self.y = self.y + (1 * self.spd)
				end
			elseif _btn == button.up then
				self.i_dir = direction.up
				self.col_point = { x = self.x+(self.max_width/2), y = self.y}
				if collide(self,button.up) == false then
					self.y = self.y - (1 * self.spd)
				end
			end
		else
			self.state = "idle"
			start_idle = time()
		end
	end,
	animate = function(self)
		_debug_message = "state: " .. self.state .. " dir: " .. self.i_dir
		if self.state == "idle" then
			if self.i_dir == direction.down then
				animate_character(
					self,
					self.d_i_f.sf,
					self.d_i_f.nf,
					self.d_i_f.s,
					self.d_i_f.fl
				)
			elseif self.i_dir == direction.up then
				animate_character(
					self,
					self.u_i_f.sf,
					self.u_i_f.nf,
					self.u_i_f.s,
					self.u_i_f.fl
				)
			elseif self.i_dir == direction.left then
				animate_character(
					self,
					self.l_i_f.sf,
					self.l_i_f.nf,
					self.l_i_f.s,
					self.l_i_f.fl
				)
			elseif self.i_dir == direction.right then
				animate_character(
					self,
					self.r_i_f.sf,
					self.r_i_f.nf,
					self.r_i_f.s,
					self.r_i_f.fl
				)
			end
		end
		if self.state == "moving" then
			if self.i_dir == direction.right then
					animate_character(
					self,
					self.r_m_f.sf,
					self.r_m_f.nf,
					self.r_m_f.s,
					self.r_m_f.fl
				)
			elseif self.i_dir == direction.left then
					animate_character(
					self,
					self.l_m_f.sf,
					self.l_m_f.nf,
					self.l_m_f.s,
					self.l_m_f.fl
				)
			elseif self.i_dir == direction.down then
					animate_character(
					self,
					self.d_m_f.sf,
					self.d_m_f.nf,
					self.d_m_f.s,
					self.d_m_f.fl
				)
			elseif self.i_dir == direction.up then
					animate_character(
					self,
					self.u_m_f.sf,
					self.u_m_f.nf,
					self.u_m_f.s,
					self.u_m_f.fl
				)
			end	
		end
	end,
})

:: collision.lua
--[[pod_format="raw",created="2024-05-17 20:59:47",modified="2024-05-30 23:11:11",revision=916]]
include './types.lua'
include './util.lua'

function tile_collide(o,d,r,f)
	r = r or 0
	f = f or 0		
	if d == button.up then
		circfill(o.col_point.x, o.col_point.y, 2, 8)
		if fget2(mget((o.col_point.x/_tile_size) + r, (o.col_point.y/_tile_size)) + r,f) then
			return true
		end
	end
	if d == button.down then
		circfill(o.col_point.x, o.col_point.y, 2, 8)
		if fget2(mget((o.col_point.x/_tile_size) + r, (o.col_point.y/_tile_size)) + r,f) then
			return true
		end
	end
	if d == button.left then
		circfill(o.col_point.x, o.col_point.y, 2, 8)
		if fget2(mget((o.col_point.x/_tile_size) + r, (o.col_point.y/_tile_size)) + r,f) then
			return true
		end
	end
	if d == button.right then
		circfill(o.col_point.x, o.col_point.y, 2, 8)
		if fget2(mget((o.col_point.x/_tile_size) + r, (o.col_point.y/_tile_size)) + r,f) then
			return true
		end
	end	
	if d == button.up_left then
		circfill(o.col_point.x, o.col_point.y, 2, 8)
		if fget2(mget((o.col_point.x/_tile_size) + r, (o.col_point.y/_tile_size)) + r,f) then
			return true
		end
	end
	if d == button.up_right then
		circfill(o.col_point.x, o.col_point.y, 2, 8)
		if fget2(mget((o.col_point.x/_tile_size) + r, (o.col_point.y/_tile_size)) + r,f) then
			return true
		end
	end
	if d == button.down_left then
		circfill(o.col_point.x, o.col_point.y, 2, 8)
		if fget2(mget((o.col_point.x/_tile_size) + r, (o.col_point.y/_tile_size)) + r,f) then
			return true
		end
	end
	if d == button.down_right then
		circfill(o.col_point.x, o.col_point.y, 2, 8)
		if fget2(mget((o.col_point.x/_tile_size) + r, (o.col_point.y/_tile_size)) + r,f) then
			return true
		end
	end
end

function collide(o,d)
	if tile_collide(o,d) then
		return true
	else
		return false
	end
end
:: inventory.lua
--[[pod_format="raw",created="2024-05-14 20:53:29",modified="2024-05-30 23:11:11",revision=1175]]
include './types.lua'

inventory=entity:new({
	max_width = 119,
	max_height = 6,
	max_capacity = 10,
	open = false,
	contents={},
	update = function(self)
		if 		 ((_c_x-480+_m_x) > _c_x-360 
			and (_c_x-480+_m_x) < (_c_x-240+self.max_width)
			and (_m_y-_c_y) > _c_y
			and (_m_y+_c_y) < (_c_y + 6))
		then
			self.open = true
		end
		if self.open == true then
			spr(140,_c_x-360,_c_y)
			spr(140,(_c_x-240)+1,_c_y)
		else
			spr(132,_c_x-360,_c_y)
			spr(132,(_c_x-240)+1,_c_y)
		end		
	end
})

item_types = {
	medicine = 1,
	first_aid = 2,
	food = 3,
	drink = 4,
	junk = 5,
	useable = 6,
	special = 7,
	unique = 8,
}
:: items.lua
--[[pod_format="raw",created="2024-05-30 22:52:53",modified="2024-05-30 23:11:11",revision=15]]
water=entity:new({
	sprite = 188,
	name = "water bottle",
	amount = 100,
	weight = 0.8
})
:: main.lua
--[[pod_format="raw",created="2024-05-03 13:26:10",modified="2024-05-30 23:11:11",revision=2254]]
include './util.lua'
include './character.lua'
include './moodles.lua'
include './inventory.lua'
include './static_interactable.lua'

_debug_message = ""
_tile_size = 32

function _init()
    _w_w, _w_h = 480,270
    c=character:new({})
    m={moodles={}}
    i=inventory:new({})
end

function _draw()
	cls(0)
	camera(c.x - (_w_w/2),c.y - (_w_h/2))
	_c_x = c.x + (_w_w/2)
	_c_y = (c.y + (_w_h/2)) - 270
	_m_x, _m_y, _m_b, _m_w_x, _m_w_y = mouse()
	map()
	c:animate()
	i:update()
	display_moodles(m,c)
	debug()
	interact_container(c)
end

function _update()
	c:move()
	c:update_vitals()
	interact_container(c)
end

function debug()
	print("debug_message: " .. _debug_message
			.. " c_x: " .. _c_x
			.. " c_y: " .. _c_y, _c_x-480, _c_y+10)
end
:: moodles.lua
--[[pod_format="raw",created="2024-05-07 21:40:35",modified="2024-05-30 23:11:11",revision=1549]]
include './types.lua'

moodle=entity:new({
	moodle = "none",
	sprite = 0,
	x = 0,
	y = 0,
})

function health_moodle(m,c)
	index = get_index(m.moodles, "health")
	current_moodle = nil
	if index != -1 then
		current_moodle = m.moodles[index]
	end
	current_sprite = nil
	if c.health < 70 and c.health >= 50 then
		new_sprite = moodle_sprites.health_1
	elseif c.health < 50 and c.health >= 30 then
		new_sprite = moodle_sprites.health_2
	elseif c.health < 30 and c.health >= 10 then
		new_sprite = moodle_sprites.health_3
	elseif c.health < 10 then
		new_sprite = moodle_sprites.health_4
	end
	if current_moodle == nil and new_sprite != nil then
		return moodle:new({moodle="health",sprite=new_sprite})
	elseif current_moodle != nil and current_moodle.sprite != new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle="health",sprite=new_sprite})
	elseif current_moodle != nil and new_sprite == nil then
		del(m.moodles,current_moodle)
		return nil
	elseif current_moodle != nil and current_moodle.sprite == new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle="health",sprite=new_sprite})
	end
	return nil
end

function wound_health_moodle(m,c)
	index = get_index(m.moodles, "wound_health")
	current_moodle = nil
	if index != -1 then
		current_moodle = m.moodles[index]
	end
	new_sprite = nil
	if c.wound_health < 70 and c.wound_health >= 50 then
		new_sprite = moodle_sprites.wound_health_1
	elseif c.wound_health < 50 and c.wound_health >= 30 then
		new_sprite = moodle_sprites.wound_health_2
	elseif c.wound_health < 30 and c.wound_health >= 10 then
		new_sprite = moodle_sprites.wound_health_3
	elseif c.wound_health < 10 then
		new_sprite = moodle_sprites.wound_health_4
	end
	if current_moodle == nil and new_sprite != nil then
		return moodle:new({moodle="wound_health",sprite=new_sprite})
	elseif current_moodle != nil and current_moodle.sprite != new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle="wound_health",sprite=new_sprite})
	elseif current_moodle != nil and new_sprite == nil then
		del(m.moodles,current_moodle)
		return nil
	elseif current_moodle != nil and current_moodle.sprite == new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle="wound_health",sprite=new_sprite})
	end
	return nil
end

function pain_moodle(m,c)
	index = get_index(m.moodles, "pain")
	current_moodle = nil
	if index != -1 then
		current_moodle = m.moodles[index]
	end
		new_sprite = nil
		if c.pain > 20 and c.pain < 30 then
			new_sprite = moodle_sprites.pain_1
		elseif c.pain > 30 and c.pain < 50 then
			new_sprite = moodle_sprites.pain_2
		elseif c.pain > 50 and c.pain < 70 then
			new_sprite = moodle_sprites.pain_3
		elseif c.pain > 70 then
			new_sprite = moodle_sprites.pain_4
		end
	if current_moodle == nil and new_sprite != nil then
		return moodle:new({moodle="pain",sprite=new_sprite})
	elseif current_moodle != nil and current_moodle.sprite != new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle="pain",sprite=new_sprite})
	elseif current_moodle != nil and new_sprite == nil then
		del(m.moodles,current_moodle)
		return nil
	elseif current_moodle != nil and current_moodle.sprite == new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle="pain",sprite=new_sprite})
	end
	return nil
end

function hunger_moodle(m,c)
	index = get_index(m.moodles, "hunger")
	current_moodle = nil
	if index != -1 then
		current_moodle = m.moodles[index]
	end
		new_sprite = nil
		if c.hunger > 20 and c.hunger < 30 then
			new_sprite = moodle_sprites.hunger_1
		elseif c.hunger > 30 and c.hunger < 50 then
			new_sprite = moodle_sprites.hunger_2
		elseif c.hunger > 50 and c.hunger < 70 then
			new_sprite = moodle_sprites.hunger_3
		elseif c.hunger > 70 then
			new_sprite = moodle_sprites.hunger_4
		end
	if current_moodle == nil and new_sprite != nil then
		return moodle:new({moodle="hunger",sprite=new_sprite})
	elseif current_moodle != nil and current_moodle.sprite != new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle="hunger",sprite=new_sprite})
	elseif current_moodle != nil and new_sprite == nil then
		del(m.moodles,current_moodle)
		return nil
	elseif current_moodle != nil and current_moodle.sprite == new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle="hunger",sprite=new_sprite})
	end
	return nil
end

function thirst_moodle(m,c)
	index = get_index(m.moodles, "thirst")
	current_moodle = nil
	if index != -1 then
		current_moodle = m.moodles[index]
	end
		new_sprite = nil
		if c.thirst > 20 and c.thirst < 30 then
			new_sprite = moodle_sprites.thirst_1
		elseif c.thirst > 30 and c.thirst < 50 then
			new_sprite = moodle_sprites.thirst_2
		elseif c.thirst > 50 and c.thirst < 70 then
			new_sprite = moodle_sprites.thirst_3
		elseif c.thirst > 70 then
			new_sprite = moodle_sprites.thirst_4
		end
	if current_moodle == nil and new_sprite != nil then
		return moodle:new({moodle="thirst",sprite=new_sprite})
	elseif current_moodle != nil and current_moodle.sprite != new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle="thirst",sprite=new_sprite})
	elseif current_moodle != nil and new_sprite == nil then
		del(m.moodles,current_moodle)
		return nil
	elseif current_moodle != nil and current_moodle.sprite == new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle="thirst",sprite=new_sprite})
	end
	return nil
end

function delirium_moodle(m,c)
	index = get_index(m.moodles, "delirium")
	current_moodle = nil
	if index != -1 then
		current_moodle = m.moodles[index]
	end
		new_sprite = nil
		if c.delirium > 20 and c.delirium <= 30 then
			new_sprite = moodle_sprites.delirium_1
		elseif c.delirium > 30 and c.delirium <= 50 then
			new_sprite = moodle_sprites.delirium_2
		elseif c.delirium > 50 and c.delirium <= 70 then
			new_sprite = moodle_sprites.delirium_3
		elseif c.delirium > 70 then
			new_sprite = moodle_sprites.delirium_4
		end
	if current_moodle == nil and new_sprite != nil then
		return moodle:new({moodle="delirium",sprite=new_sprite})
	elseif current_moodle != nil and current_moodle.sprite != new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle="delirium",sprite=new_sprite})
	elseif current_moodle != nil and new_sprite == nil then
		del(m.moodles,current_moodle)
		return nil
	elseif current_moodle != nil and current_moodle.sprite == new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle="delirium",sprite=new_sprite})
	end
	return nil
end

function display_moodles(m,c)
	m.moodles = {}
	h = health_moodle(m,c)
	if h != nil then
		add(m.moodles,h)
	end
	wh = wound_health_moodle(m,c)
	if wh != nil then
		add(m.moodles,wh)
	end
	p = pain_moodle(m,c)
	if p != nil then
		add(m.moodles,p)
	end
	hu = hunger_moodle(m,c)
	if hu != nil then
		add(m.moodles,hu)
	end
	t = thirst_moodle(m,c)
	if t != nil then
		add(m.moodles,t)
	end
	d = delirium_moodle(m,c)
	if d != nil then
		add(m.moodles,d)
	end
	
	current_y = 1
	for i, moodle in ipairs(m.moodles) do
		spr(moodle.sprite, _c_x-18, _c_y + current_y)
		current_y += 20
	end
end

function get_index(moodles, name)
	for i, m in ipairs(moodles) do
		if m.moodle == name then
			return i
		end
	end
	return -1
end

moodle_sprites={
	health_1 = 168,
	health_2 = 169,
	health_3 = 170,
	health_4 = 171,
	wound_health_1 = 160,
	wound_health_2 = 161,
	wound_health_3 = 162,
	wound_health_4 = 163,
	pain_1 = 128,
	pain_2 = 129,
	pain_3 = 130,
	pain_4 = 131,
	delirium_1 = 136,
	delirium_2 = 137,
	delirium_3 = 138,
	delirium_4 = 139,
	hunger_1 = 152,
	hunger_2 = 153,
	hunger_3 = 154,
	hunger_4 = 155,
	thirst_1 = 144,
	thirst_2 = 145,
	thirst_3 = 146,
	thirst_4 = 147,
}
:: static_interactable.lua
--[[pod_format="raw",created="2024-05-23 20:57:56",modified="2024-05-30 23:11:11",revision=662]]
include './types.lua'
include './collision.lua'
include './util.lua'

container=entity:new({
	can_interact = function(o)
		local current_cel = { x = o.col_point.x/_tile_size, y = o.col_point.y/_tile_size}
		local top_right = { x = current_cel.x + 1, y = current_cel.y - 1 }
		local top_left = { x = current_cel.x - 1, y = current_cel.y - 1 }
		local top = { x = current_cel.x, y = current_cel.y - 1 }
		local right = { x = current_cel.x + 1, y = current_cel.y }
		local left = { x = current_cel.x - 1, y = current_cel.y }
		local bottom_right = { x = current_cel.x + 1, y = current_cel.y + 1 }
		local bottom_left = { x = current_cel.x - 1, y = current_cel.y +1 }
		local bottom = { x = current_cel.x, y = current_cel.y + 1 }
		local current = { x = current_cel.x, y = current_cel.y }
		local cell = nil
		
		if fget2(mget(top_right.x, top_right.y), 1) then
			text_x = (o.col_point.x) + _tile_size
			text_y = (o.col_point.y) - _tile_size
			cell = top_right
		elseif fget2(mget(top_left.x, top_left.y), 1) then
			text_x = (o.col_point.x) - _tile_size
			text_y = (o.col_point.y) - _tile_size
			cell = top_left
		elseif fget2(mget(top.x, top.y), 1) then
			text_x = (o.col_point.x)
			text_y = (o.col_point.y) - _tile_size
			cell = top
		elseif fget2(mget(right.x, right.y), 1) then
			text_x = (o.col_point.x) + _tile_size
			text_y = (o.col_point.y)
			cell = right
		elseif fget2(mget(left.x, left.y), 1) then
			text_x = (o.col_point.x) - _tile_size
			text_y = (o.col_point.y)
			cell = left
		elseif fget2(mget(bottom_right.x, bottom_right.y), 1) then
			text_x = (o.col_point.x) + _tile_size
			text_y = (o.col_point.y) + _tile_size
			cell = bottom_right
		elseif fget2(mget(bottom_left.x, bottom_left.y), 1) then
			text_x = (o.col_point.x) - _tile_size
			text_y = (o.col_point.y) + _tile_size
			cell = bottom_left
		elseif fget2(mget(bottom.x, bottom.y), 1) then
			text_x = (o.col_point.x)
			text_y = (o.col_point.y) + _tile_size
			cell = bottom
		elseif fget2(mget(current.x,current.y), 1) then
			text_x = (o.col_point.x)
			text_y = (o.col_point.y)
			cell = current
		else
			text_x = nil
			text_y = nil
			cell = nil
		end
		if text_x and text_y and cell then 
			if mget(cell.x, cell.y) == 4 then
				s_d_cell = cell 
				mset(cell.x, cell.y, 5)
				mset(cell.x, cell.y+1, 13)
			end
		elseif s_d_cell then
			mset(s_d_cell.x, s_d_cell.y, 4)
			mset(s_d_cell.x, s_d_cell.y+1, 12)
		end
	end
})
:: types.lua
--[[pod_format="raw",created="2024-05-06 22:22:02",modified="2024-05-30 23:11:11",revision=1547]]
class={
	new=
		function(self,tbl)
			tbl=tbl or {}
			setmetatable(tbl, {
				__index=self
				}
			)
			return tbl
		end,
}

entity=class:new({
	x=0,
	y=0,
})

button={
	up=4,
	down=8,
	left=1,
	right=2,
	down_right=10,
	up_left=5,
	up_right=6,
	down_left=9,
	none=0
}

direction={
	up = 1,
	down = 2,
	left = 3,
	right = 4
}
:: until.lua
--[[pod_format="raw",created="2024-05-06 21:03:50",modified="2024-05-06 21:40:08",revision=95]]
function coalesce(a, b)
	if a == nil then
		return b
	else
		return a
	end
end

function time_since(start, current)
	return (flr(current) - flr(start))
end
:: util.lua
--[[pod_format="raw",created="2024-05-03 22:03:54",modified="2024-05-30 23:11:11",revision=1582]]
function coalesce(a, b)
	if a == nil then
		return b
	else
		return a
	end
end

function time_since(from, to)
	return flr(to) - flr(from)
end

function fget2(n, f)
	if f then
		return (fget(n)>>f)&1==1
	else
		return fget(n)
	end
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjQ4OjQ3Iixtb2RpZmllZD0iMjAyNC0w
NS0zMCAyMzoxMToxMSIscnVudGltZT03LHdvcmtzcGFjZXM9e3tsb2NhdGlvbj0ibWFpbi5sdWEj
MjQiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImNoYXJhY3Rlci5sdWEjMTYiLHdvcmtz
cGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImNvbGxpc2lvbi5sdWEjMzkiLHdvcmtzcGFjZV9pbmRl
eD0xfSx7bG9jYXRpb249InN0YXRpY19pbnRlcmFjdGFibGUubHVhIzUiLHdvcmtzcGFjZV9pbmRl
eD0xfSx7bG9jYXRpb249ImludmVudG9yeS5sdWEjNiIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2Nh
dGlvbj0iaXRlbXMubHVhIzUiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249Im1vb2RsZXMu
bHVhIzE4MCIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0idHlwZXMubHVhIzM0Iix3b3Jr
c3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJ1dGlsLmx1YSMxNyIsd29ya3NwYWNlX2luZGV4PTF9
LHtsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0aW9uPSJtYXAv
MC5tYXAiLHdvcmtzcGFjZV9pbmRleD0zfSx7bG9jYXRpb249InNmeC8wLnNmeCIsd29ya3NwYWNl
X2luZGV4PTR9fV1dbHo0AAQAAAADAAAAMG5pbA==
:: [eoc]
