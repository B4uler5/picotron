picotron cartridge // www.picotron.net
version 2

:: gfx/
:: map/
:: sfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
Ni0xMCAyMzowOTo0NCIscmV2aXNpb249Mzg0NF1dbHo0ALMTAAD7YgAA8xh7WzBdPXtibXA9cHh1
AEMgICAE-yD----zLGZsYWdzPTAscGFuX3gIAMx5PTAsem9vbT03fSw1AFUNHxcPEgcAnwwPFw8g
DxIPFwsAfmUNHxf-IA4FAB4NJQAPkwBhIw8gcQEfMXEBFvYBEa8XTyCvFz8gDxevEg8XLwgAdxKv
IA8SLxcIABsXCAAAGAAaIAgAAY8AHxcMAAAACgAeIAwADzAA--8PANQCHw8EACgPEAMcIg8SzgMe
EtUDDwsAewqoAA_vAHgCiwAPhwT-WlAPIPEBjicA8Q8ODQ8SAf0BAX4MDg0OAR3uHQFuDA0ODQEN
-gENAW4VAAMLAA8WAAdUDw39AQsXABX7FwAfCxYAAnMbLg1uDS4bGQC0Cy4NDg1ODQ4NLgs2AFQ_
DW4NPjkAMxvtGxgAAUMAJQ4NAgADLgIfMy4CEf8KFhoEEPcBMAf-FwEHEAce7yAeBwAHDv0BDgcA
BVAPDf4BDA8AEfwPABkMDgBwHC0ObQ4tHBgAkC0ODQ5NDg0OLR8AYAw9Dm0OPQoANxzuHC8AKe0c
HQAPNQAGFu01AE-3BfAz4QAZ9AQICAQAUQABXxcRXRENDh0ODRFeCgAfgU8JGV8QEATw8DEACx05
iAORFxKvID8XzyAvWgIRj14CAYMFA3ICfx8XzyAfF_8IACAPUAADIi8XcAAz-xckzwIPBAAAMi8X
35EADxwAAgBNABG-TQCZ-xcA-yAALxefFgACbwARfwwAAkoAU78g-xcEBQAEEgAZHzIAABAAP-8g
AAkAIAhGAAp4AH8-F58g-xcSkgELHzYSC09EDR8XAQYAQAw9-gzTAw8GAGAuDS0kBg8KAQpWDQ8g
DQ4CAKH9I6FNoT0BrgEtBAATrQQAM64BLgQAAGkEBAYAAH8EBAYADxgA-T8dDg0CAAoPpwEMD0IJ
TREBSAACBgAHPwIPBgBgPy3_DQwBHPIPAR3vIB0BrQENPg8Xbgw_DQGeDQENLgwODE4MDgwuDwAh
PgwaABCtsAeQwQz9AQwBrfEFGQAQfiwATw0BDb4MAA-J3QGdAU3xEd0B-QABzwFAAQ3eDekBBQIA
ER0SABLdGAARHgIAJC4NJgAADgASPg4AEB0MACBODVEAARcAQV4N8QIiABFuFAAhHR57AAJFABWO
QQASngoAIx2uEgAfvggAD2-9AAHd8RAVBRwe8FsQDzQAPw9AByQRj_kFFT_bBh1vDQYCDAAACAAT
r2sGHy8MACAIXAACFAA3LxePywZRDyDvF7_EABOvKwcAKABTfxdPIC8QADMPF78IAASsAAA_CwIQ
AAQwABUfDAAVbwwAFw-MAAZAABdvDAADgQcLOAAX3ywAtP8XCW8gLxf-IAMvIgBkEv8gAQ8SMwA-
-yAFCQAFCywABUYANv8XCcUANP8XBG4AUU8gPxfvkgARvzwAGc_6AAFQABsXEAADJAAADAAXPxwA
FD-KCBAXYQAfEY4JJR8xTgIED7MCIA80AAMPaAApDzQAeQ_DAyHhAV0BXQEtAc0BDT8gDQHQBAAI
BRWuDAA8DxUOFAAjDB4SABEOzQQUPhgAAAQAWAyODQFdSAAXcQwALgFdYgAEEAAgTg3YBQKOANAN
Th0MLg3xAw1OHD4Now0BLgAt7g0IABDNBgAT4QoAQ24NDF4bAFNuDA0MTgwAFX4WAB-uCAA7T-0B
Ac2MBR4B4gAn-QFvARPuCAAABAAgTi0TDgYQAGcuHS8TDQwSAJIdDg0cDR4MDU5MAZEdHA0MHgwu
DE5nAUIMDQ4MVwYDaAFJHgwNDKMBSC4MDQwQABo_HwAZTh0AH_4MAA8k-QELAC7xAxQAASsAAPAA
B6UBC0QBZA0uHQ8VjgwAQwsdC34MACQ_GxYAH_4IAA9PzQH9ARYHtA8xAIAAtgKx-QgRTQEN-yAG
DRECCTOeHZ4KAGSODR8TDY4NAFAMHgwNHr0DAhAAVc4MHRwNDQA1DRweDQBjvh0_DA0eDQBjrg0c
TgwtDABBDH4cHacJsP0HHB0uDfEJDRwu4wEjrQEsAADICRYMDQBGbg0MDQ4AZy4NDh0MDhEAMB4N
DHgABhEAMA4NDIcABxEAKQwuEAAASQMIMQBZLg0MDgwRACcMTg4AH44MABcUzQoAHeESAAsoAD_t
AU3RAg0fNVsEADO9Aa1aBBOeTgABigMnHT4OAEgeHR8TEAAAUgQYThAAAUcECiIASgweDD4jABpu
IAADDwAAggBwDY4NkQwNgQ8AIf0DFgAhDX7-ChGOjgE1Lh0MDQAArgQjHI4OAFMOHQwNDAUBANgE
Er4LADA9DN0IACDxBQ0ANJ0BfVIATwENXg0MABoQfRwBQH4N8QYNACH9BBQATw3_Ag0JAABPnQH9
BH8BDg8cBCAfNboDHg8xAL4AqAKJPQHdAa0BPQGjEBEdqQEhHQ4EAAYCAAUOABAdMQAcDjAAAAgA
CjAAJQ0OAgAPMgACAGIAFd00AFQdAT3xAEkAPI0BPT8AEW60AgU5AAEQCRANVgcBFwAHRgABFQNG
DA0MDjEAABgAIw0ePAQvHg1bAA0eblQAGY1MAF8dDi0OHUoAAFkOLQ4tDkwABhIACE4AB0AAD1IA
GgQQABY9TgACjgNA-QEhrbkJ8gIeHT4d4Q0_DQ8THRsdDg0b3U8AsQsOGw4NGw0LDg0L3QSTDgsd
Lh0LHgse7QRSHhsuG14MAA5LCQ-wBBEANgBOAQ3vIBEID8cJHCANrsAIBQwADSMAIQ3uqgUOxggP
CABMDxcBEg-BAx4PhQT1c50B7QENHyD4BRLOfwMPDABBAWkAMR4N8VcIAPsEIg0ezhEBiAMPDABk
AYUFQPER-Q9dFhwNBQAv-Q94Ag0fNIMBHg8xAP--rR-yMQAdL-8cxQAeDzEA---------------V
9BVArxcgHpgOEA64DgAOyA4ADhgPIAgNGA0IDSgeOA04DTgeKA0QABHYAgAxOA0IAgAQKC0ABQwA
AEEAvyAOmA5AHlgecF5AhgA8NSgPGIgAswgcHqgsHpg8HohMjAA1DA0sjAD-BQwNPA4ADkh8DhAO
KIwOIB6cDkCujQAh02gvGA4QDng9DgAOeE2RAPEEDBgMDQwtHjgMGB0MPR4oDAgMHREA0UiNHjid
HiitHhgdAA0CADQtHggLADA9Ht0CAC-_AYYAHHT-FwHfGB8XBACTLxgPIA8YDyAfCACCLxgfFz8Y
DyAEAA8gAAMX3wQAEz8YABcPIAAENAAEBAAXPzAAT98Y-xezABq0dwYE-xdo-yBlHxcFALwPFwAO
-yBjDiD_Y7cR8wAtNC4wNTk1MjM4MDk1MjRZAKItOC43MTkwNDc2BgACaAAZMmgA0XQSBBD-FGAg
-mIA-v8BAH9OAP5iIP5gGhIMHzIrAx0vMTAyAC8BSwLxC58eDhAOvQ4ADs0OAA4dB10HLR4dJz0n
HR4tDAAAHwIwDb8gExz_CpcMDQ4ADg0MdwwNDhAOHXwdDiAOnQ5AHl1TAw98ADGAHQIevRIerSJ-
ABECfwATAn8AEBIuAM58Ig4QDj1yDiAeDYJGAw_AABMgbx5FAHF9Mg4ADn1CgwD3CT0SByIeHScd
EicSHi0HHTIHIh5Ngh49koUAIB4dgwC-Hg0SfCIe0h7S-gF7AB1A-xcB0joAwx4iB1IHIh4SJzIn
EgwAABYAEAJqAO8CDZcNAh4SDXcNEh4ifWkAISB3RPICII8g4igQNgUAEAIFAAHlKEFFHxdPeyUR
P_0kBSQAIj8gGQAxTyAPBAAVHyklAzIAF68VAAk2ABMfGQAANgAxXyA-EAAUPzoAAs0kAvkkE9-d
JBpPQgARL1wmAD4AY38gLxdfIKYDDb4ANP8Xab8DDwUA9g-IBAhGNy41MwEAAy8CZC0xLjMxNgEA
HzfGBAYfE8YEEE81NC4zYgAAGTAWAC8zNOYhJA-kBDbyC5wOEA68DgAOPD8gTA4ADiwNPA08Hjxd
PB48CgAIBgABFgAhPxCpB-4ELA07DSwOEA48PTwOIA6cDkAeXOwED4QAMTEsDxAIACEcGwcAwwwr
HjxdOx48DTsNO4cAAAgAzzw9Sw4QDiyLDiAem-MEJYJ8HxAOEA6MLYoAEAxCCLIsCzwLPR48Wz0e
PAoABwYA4SwNWz0eHB0LPQs9HgwtBwA_TTtNMwgP_AQUQN8QHxcEAPEATxA-IE8QHxc-EA8gPA4-
CgCpXj0fFz0OPA49GwYAEF4KACQ9DgYAj00_TRvdG937fgAeL-DwMgCzAcYB9wWbDhAOuw4ADksv
IEsOAA5bDVseawQA-hxbDQkNSx5LDSkNOx47DUkNKw4ADisNSQ0bDhAOOw0pDSsOIA47LSsOQB5b
0AIPgwAtcUsDHmsNOxOFACEbI4YAETOGABMjhgAACAAAhgDPMw4QDisDLUMOIB6TzwIlcnsTDhAO
iyOIACELM4kAYQtDHmsNUwQA4VsDDVMeSwMNCQ1DHjsDigAgKwODADEeGxMHACELMxUAX1MtQx7T
0gIiydMe0x5TLyBDHmMNUwQAEVN1ABFDXwARM2wAAgYAH0NxACkv8PAyALMBvAHxEZoOEA66DgAO
yg4ADloPIFoeWg0KDUoeag1aHtoeOg0KAgCVKh4qjRoeGg0IAgCzCg4ADhqNCg4QDiokAJ4aDiAO
mg5AHlrNAg_LACm1Og8ZHmoNOhweqiyPAFksHiqNHI8AEQyPADEcDgCPABEM7w0_EA4q3g0PjwAY
cHofGQ4QDoqlBSKKPZMA8QIKTR5aDAoMTR5qDF0eWn0eOjojAOANdSqMHR4aDAgCAJUNHhoNjB0e
Ci0iAA_uBSY0GR8XBAD3Am8ZDyBfGR8XXxkPIA8ZDyBPFAAAIAATPxgABAQA9AMvGR8XLxmPIB8Z
HxcfGQ8gCA4CABEPGgAgjh3uBQH0In8OLRzdHN38DQPr9QqXDhAOtw4ADlcIVw4ADkcoRx5XKEce
R0g3BAAAEAARZx4AEbcsAH4gDpcOQB5X9AIPcgAs8AcnDxIeR0gXHR5HSActHlcoBz0eZwgHZhAg
Z10vAL9tDhAON30OIB4HjeACJYF3HxIOEA6HLX4AIRc9fwCVTR5XKE0eR0g9BAD-ADcdKE0eJz0I
XR4XvR4HzccCJzASHxcEAKBvEgheHxdeKE4dBAA1Tkg_BAAAEABSbgheHd4CAB-9iwIgDzIA----
C-8RCAgEIBZQF0APHA8QHxwgDi8QHhAeDS4QFw0nEF4QXgBNAB7yBB8gUAUPFUAFLiAFDgcuEAUn
HhAJAAEFAB9OUQAf8gIWQAYQBmAGEBcQBiAHAAcQBwYAEAACAE8XIAdQUQAd-wtAKDA4IAcoDxgQ
JwgOEDcGEDcGICcGMBcGQGsBPR82MQBdXxIE8P8RMgAc8CAwfxdgDnEOQA6RDiAOERUBRREOEA4B
BQ8WDyAFLxYPIA8WBQEOEA4FHQ8gPQwdBR0AUB0FPQUdFQAwEX0RNQDwAV0RDjAOAnECDiAOAh8V
URsLFOACGx0fGAsdKwIeKy0KLSEP-xAbFQgbFSsOIB5xHkAOcQ5QDiEeIQ5gDxMfERAZDxMwtwB2
QAgPGFu2ADEIClu2ANAKOy0FDhAecQ0FDjAOvAAPuAAqL-AEcAFiD7QAQxAgtgAiHxYIAAK3AAAO
ABE-FgABuwChDQ8gBQwdDAUMDcAAfwUNBR0FDQXGAGAOfQMPMQBuD64DLjuxDhAEADAgDpFVASF-
FVYBEZ1TAYy9Ah7dDgAOvXoDXy8TECwwfwBWEZ0RAkgecQwFRgNPLxMQK44CHw8EAS4OAAEPfACO
Do8CDzEAnwdAAjCBDjBJBEQFQQ4g-QRxDxYBDSEOIPoEMB0BBQsAQAEdBR0iADARPUEwAJEtMQ5A
DgIxHxU6BDAcEUxlAWAcHQ8YHTx7FRBNCBbAHBUIFSwOQB5hDmAOBACgIQ4hDnAfEQ8TAAUAH0Cz
PQwPsABBIFECBgBSHxUxHAKwAFAIDxg8ArEAMi0IC7MAzwscLQUOMB5RDQUOULYAMC-wBGcBWg_t
AEQBVQYPrgABUQ0MBQwNsABPBQ0FDbMAADAbEUuzABAbswAQO8gUQE07DiBKBi8VK7MAIg8oAx4P
MQCOD4oDYgFsARGABQAPrQCEsFAOYWAOQQ4BDxNgIgKfDxFQGw8TUAtAXAGMAsoCPiEOsM0CD1wB
eiEOUGUAUCE_IQ5AqwA-MB8Rxwk-LzEwMgCRB3gBAEoID3gNWgBBC04eIQ6wRAsPtgCJICEeLgJv
DmAJHxGAtgAdL-AEtwkuIC8TMwEvLDB7AGCPIR4vEw5gLIDGAh8PMgCxC3QCD0IBBUGfFQ4griQR
3TwBMJ0vFm4MEBxvBCAeIcABnxEeKw5gLhAuMH8AnC-wBIAAIAW2Aj8RHix3AJgOUAIPMgCjCzUC
UBEfFgFNKQUQLRYFEC0JABIMCAAsAZ0ZBZEPFXELDiAOK1EXIAAsDBZrjBJAHQo7PVgCGB1YAh4p
4QEPogCzL-AEowA0AFsGFjtaBkQdCBsdWgYPngA_QR0PIA3cKxgdogAiDQwVAB8NqgBfD74CDx82
MQCOD64CKRETYQFwDxULClELGgkgALICsCoLKh4qLQgJCgs6IiC5HQkqCz0OEA4LYQu5Ah4ncQEP
rAC8L-AErQAsNB8VC6wAoh8YCh06HiotCS2pAL8IGh0qDiAOC3ELDqIAPwJoAzMADQBoAxYAaAMA
PC8PrgBSUG09Nn19
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
Ni0xMCAyMzowOTo0NCJdXWx6NAAEAAAAAwAAADBuaWw=
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
Ni0xMCAyMzowOTo0NCIscmV2aXNpb249MzYyNl1dbHo0AN0AAAB2EAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD-AFsxMDAwMgQAEzQEAAAMAC8zMIAATgBjABMyCABiMTkwMDBjBAAv
MzCAAFOmMjkwMDI4MDAxOIwAIjE4GAAPgABRJjE5eAATM3cBIzI5DAEvMzABAEsAZAAfYQQACC9i
MAEA----------------xPUNIiksaGlkZGVuPWZhbHNlLHBhbl94PS0xOTEuNgEAETcXAKN5PS00
MTMuNTgzAQCyNCx0aWxlX2g9MzIKABB3CgCAem9vbT0xfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
Ni0xMCAyMzowOTo0NCJdXWx6NAAEAAAAAwAAADBuaWw=
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
Ni0xMCAyMzowOTo0NCIscmV2aXNpb249MzQ1Ml1dbHo0ACcBAADtFwAA-yxweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAUGBwAP-5AICQoLDwwPDQ8ODw8AD--w-wEA6-8n0gEQBg8g
EAEgASAB8AACEAIMEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMMAAcIg9AMQCD
D2-gAhACDz0zAE-wxw9CYgAdDzAA------9FH-8BAKz-XcgPQAACQB8TDxQPFQ8WDxcPGA8aDx0M
DyQPKQ8vDzMPOA88D0EPRQ9IH0oPRw9FD0EPPw89DzcPMg8vDywPKP--EfIP-hEPPQ8-X0BfPw8_
Dz1PPB87HzovOV84DzkeAf4K8HAPQAAPEED_sAoA--------------------fFD_sPD-OQ==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
Ni0xMCAyMzowOTo0NCJdXWx6NAAEAAAAAwAAADBuaWw=
:: character.lua
--[[pod_format="raw",created="2024-05-05 22:21:00",modified="2024-06-10 23:09:44",revision=3734]]
include './types.lua'
include './util.lua'

character=entity:new({
	x=160,
   y=135,
   max_width = 16,
   max_height = 18,
   col_point = { x=0, y=0 },
   select_point = { x=0, y=0},
	i_dir = direction.up,
	spd=0.65,
	health = 90,
	wound_health = 90,
	pain = 10,
	hunger = 10,
	thirst = 50,
	delirium = 0,
	d_i_f = {sf = 196, nf = 4, s = 1, fl = false},
	u_i_f = {sf = 204, nf = 4, s = 1, fl = false},
	l_i_f = {sf = 212, nf = 4, s = 1, fl = false},
	r_i_f = {sf = 212, nf = 4, s = 1, fl = true},
	d_m_f = {sf = 228, nf = 2, s = 2, fl = false},
	u_m_f = {sf = 230, nf = 2, s = 2, fl = false},
	l_m_f = {sf = 220, nf = 4, s = 2, fl = false},
	r_m_f = {sf = 220, nf = 4, s = 2, fl = true},
	state = "idle",
	start_idle = nil,
	start_move = nil,
})

function move_character(c)
	_btn = btn()
	if _btn != button.none then
		c.state, c.start_move = "moving", time()
		c.col_point = { x = (c.x+(c.max_width/2)), y = (c.y+(c.max_height/2)) }
		if _btn == button.down_right then
			c.i_dir = direction.down
			c.col_point = { x = c.x+c.max_width, y = c.y+c.max_height}
			if collide(c) == false then
				c.y, c.x = c.y + (0.50 * c.spd), c.x + (1 * c.spd)
			end
		elseif _btn == button.up_left then
			c.i_dir = direction.up
			c.col_point = { x = c.x, y = c.y}
			if collide(c) == false then
				c.y, c.x = c.y - (0.50 * c.spd), c.x - (1 * c.spd)
			end
		elseif _btn == button.up_right then
			c.i_dir = direction.up
			c.col_point = { x = c.x+c.max_width, y = c.y }
			if collide(c) == false then
				c.y, c.x = c.y - (0.50 * c.spd), c.x + (1 * c.spd)
			end
		elseif _btn == button.down_left then
			c.i_dir = direction.down
			c.col_point = { x = c.x+1, y = c.y+c.max_height}
			if collide(c) == false then
				c.y, c.x = c.y + (0.50 * c.spd), c.x - (1 * c.spd)
			end
		elseif _btn == button.right then
			c.i_dir = direction.right
			c.col_point = { x = c.x+c.max_width, y = c.y+(c.max_height/2)}
			if collide(c) == false then
				c.x = c.x + (1 * c.spd)
			end
		elseif _btn == button.left then
			c.i_dir = direction.left
			c.col_point =  { x = c.x, y = c.y+(c.max_height/2)}
			if collide(c) == false then
				c.x = c.x - (1 * c.spd)
			end
		elseif _btn == button.down then
			c.i_dir = direction.down
			c.col_point = { x = c.x+(c.max_width/2), y = c.y+c.max_height}
			if collide(c) == false then
				c.y = c.y + (1 * c.spd)
			end
		elseif _btn == button.up then
			c.i_dir = direction.up
			c.col_point = { x = c.x+(c.max_width/2), y = c.y}
			if collide(c) == false then
				c.y = c.y - (1 * c.spd)
			end
		end
	else
		c.state = "idle"
		c.col_point = { x = (c.x+(c.max_width/2)), y = (c.y+(c.max_height/2)) }
		c.start_idle = time()
	end
	c.select_point = { x = (c.x+(c.max_width/2)), y = (c.y+(c.max_height/2)) }
end

function animate_character(c)
	if c.state == "idle" then
		if c.i_dir == direction.down then
			animate_sprite(
				c,
				c.d_i_f.sf,
				c.d_i_f.nf,
				c.d_i_f.s,
				c.d_i_f.fl
			)
		elseif c.i_dir == direction.up then
			animate_sprite(
				c,
				c.u_i_f.sf,
				c.u_i_f.nf,
				c.u_i_f.s,
				c.u_i_f.fl
			)
		elseif c.i_dir == direction.left then
			animate_sprite(
				c,
				c.l_i_f.sf,
				c.l_i_f.nf,
				c.l_i_f.s,
				c.l_i_f.fl
			)
		elseif c.i_dir == direction.right then
			animate_sprite(
				c,
				c.r_i_f.sf,
				c.r_i_f.nf,
				c.r_i_f.s,
				c.r_i_f.fl
			)
		end
	end
	if c.state == "moving" then
		if c.i_dir == direction.right then
			animate_sprite(
				c,
				c.r_m_f.sf,
				c.r_m_f.nf,
				c.r_m_f.s,
				c.r_m_f.fl
			)
		elseif c.i_dir == direction.left then
			animate_sprite(
				c,
				c.l_m_f.sf,
				c.l_m_f.nf,
				c.l_m_f.s,
				c.l_m_f.fl
			)
		elseif c.i_dir == direction.down then
			animate_sprite(
				c,
				c.d_m_f.sf,
				c.d_m_f.nf,
				c.d_m_f.s,
				c.d_m_f.fl
			)
		elseif c.i_dir == direction.up then
			animate_sprite(
				c,
				c.u_m_f.sf,
				c.u_m_f.nf,
				c.u_m_f.s,
				c.u_m_f.fl
			)
		end	
	end
end

function scan_character_area(c)
	local current_cel = { x = c.select_point.x/_tile_size, y = c.select_point.y/_tile_size}
	local tr_co = { x = current_cel.x + 1, y = current_cel.y - 1 }
	local tr_spr = mget(tr_co.x, tr_co.y)
	local tr_f = fget(tr_spr)
	local tl_co = { x = current_cel.x - 1, y = current_cel.y - 1 }
	local tl_spr = mget(tl_co.x, tl_co.y)
	local tl_f = fget(tl_spr)
	local t_co = { x = current_cel.x, y = current_cel.y - 1 }
	local t_spr = mget(t_co.x, t_co.y)
	local t_f = fget(t_spr)
	local r_co = { x = current_cel.x + 1, y = current_cel.y }
	local r_spr = mget(r_co.x, r_co.y)
	local r_f = fget(r_spr)
	local l_co = { x = current_cel.x - 1, y = current_cel.y }
	local l_spr = mget(l_co.x, l_co.y)
	local l_f = fget(l_spr)
	local br_co = { x = current_cel.x + 1, y = current_cel.y + 1 }
	local br_spr = mget(br_co.x, br_co.y)
	local br_f = fget(br_spr)
	local bl_co = { x = current_cel.x - 1, y = current_cel.y +1 }
	local bl_spr = mget(bl_co.x, bl_co.y)
	local bl_f = fget(bl_spr)
	local b_co = { x = current_cel.x, y = current_cel.y + 1 }
	local b_spr = mget(b_co.x, b_co.y)
	local b_f = fget(b_spr)
	local c_co = { x = current_cel.x, y = current_cel.y }
	local c_spr = mget(c_co.x, br_co.y)
	local c_f = fget(c_spr)
	
	if tr_f != 0 then
		add(_flagged_tiles,{ tile_co = tr_co, sprite = tr_spr, flags = tr_f })
	end
	if tl_f != 0 then
		add(_flagged_tiles,{ tile_co = tl_co, sprite = tl_spr, flags = tl_f })
	end
	if t_f != 0 then
		add(_flagged_tiles,{ tile_co = t_co, sprite = t_spr, flags = t_f })
	end
	if r_f != 0 then
		add(_flagged_tiles,{ tile_co = r_co, sprite = r_spr, flags = r_f })
	end
	if l_f != 0 then
		add(_flagged_tiles,{ tile_co = l_co, sprite = l_spr, flags = l_f })
	end
	if br_f != 0 then
		add(_flagged_tiles,{ tile_co = br_co, sprite = br_spr, flags = br_f })
	end
	if bl_f != 0 then
		add(_flagged_tiles,{ tile_co = bl_co, sprite = bl_spr, flags = bl_f })
	end
	if b_f != 0 then
		add(_flagged_tiles,{ tile_co = b_co, sprite = b_spr, flags = b_f })
	end
	if c_f != 0 then
		add(_flagged_tiles,{ tile_co = c_co, sprite = c_spr, flags = c_f })
	end
end

function update_character_vitals(c)
	if c.state == "idle" and c.health < 70 then
		last_update_move, current_update = 0, time_since(start_idle, time())
		if current_update != last_update_idle then
			last_update_idle = current_update
			c.health += 0.05
			c.hunger += 0.01
			c.thirst += 0.02
			if c.wound_health < 50 then
				c.wound_health += 0.01
			end
			if c.pain > 50 then
				c.pain -= 0.05
			end
		end
	end
	if c.state == "moving" then
		last_update_idle, current_update = 0, time_since(start_move, time())
		if current_update != last_update_move then
			last_update_move = current_update
			c.health -= 0.65
			c.wound_health -= 0.25
			c.pain += 0.1
			c.hunger += 0.1
			c.thirst += 0.1
		end
	end
	if c.health < 50 
		and c.wound_health < 50 
		and c.pain > 70 
		and c.hunger > 50 
		and c.thirst > 50 then
		last_update_idle, current_update = 0, time_since(start_move, time())
		if current_update != last_update_move then
			last_update_move = current_update
			c.delirium += 0.1
		end
	end
end

:: inventory.lua
--[[pod_format="raw",created="2024-05-14 20:53:29",modified="2024-06-10 23:09:44",revision=3157]]
include './types.lua'
include './util.lua'
include './items.lua'

inventory=entity:new({
	max_width = 119,
	max_height = 68,
	max_capacity = 10,
	inv_starting_x = 0,
	cont_starting_x = 0,
	oo_ui = true,
	open = false,
	total_weight = 0,
	capacity = 10,
	selected_container = 1,
	contents={},
})

function add_to_inventory(c_i,item)
	existing_item = nil
	for i, s in pairs(c_i.contents) do
		if s.item.sprite == item.sprite then
			existing_item = s
			del(c_i.contents, s)
		end
	end
	if existing_item then
		existing_item.quantity += 1
		add(c_i.contents, existing_item)
	else
		slot = container_slot:new({quantity = 1, item = item})
		add(c_i.contents, slot)
	end
end

function display_inventory_contents(c_i)
	local current_y = flr(_c_y+13)
	print("Inventory", c_i.inv_starting_x+11, current_y-11, 23)
	c_i.total_weight = 0
	for i, c in ipairs(c_i.contents) do
		c.starting_x = c_i.inv_starting_x
		c.starting_y = current_y
		c.ending_x = c_i.inv_starting_x+114
		c.ending_y = current_y+8
		if (_m_x) > c.starting_x
			and (_m_x) < c.ending_x
			and (_m_y) > c.starting_y
			and (_m_y) < c.ending_y then
			rect(c.starting_x-1, c.starting_y-2, c.ending_x+1, c.ending_y+1, 2)
		end
		spr(c.item.sprite,c_i.inv_starting_x,current_y, 23)
		print(c.item.name,c_i.inv_starting_x+11, current_y, 23)
		print(c.item.weight, c_i.inv_starting_x+80, current_y, 23)
		print(c.quantity, c_i.inv_starting_x+103, current_y, 23)
		current_y+=10
		c_i.total_weight += (c.item.weight*c.quantity)
	end
end

function display_container_contents(c_i)
	local current_y = flr(_c_y+13)
	print("Container(s)", c_i.cont_starting_x+11, current_y-11, 23)
	local cont_icn_x = c_i.cont_starting_x+2
	local cont_icn_y = current_y+45
	for i, cc in ipairs(_containers) do
		local cont_icn_b_s_x = cont_icn_x - 1
		local cont_icn_b_s_y = cont_icn_y - 1
		local cont_icn_b_e_x = cont_icn_x + 8
		local cont_icn_b_e_y = cont_icn_y + 8
		if i == c_i.selected_container then
			_debug_message = "enters selected container"
			rect(cont_icn_b_s_x, cont_icn_b_s_y, cont_icn_b_e_x, cont_icn_b_e_y, 2)
			spr(cc.small_icon, cont_icn_x, cont_icn_y)
			for j, ccc in ipairs(cc.contents) do
				local m_is_on = false
				ccc.starting_x = c_i.cont_starting_x
				ccc.starting_y = current_y
				ccc.ending_x = c_i.cont_starting_x+114
				ccc.ending_y = current_y+8
				if (_m_x) > ccc.starting_x
				and (_m_x) < ccc.ending_x
				and (_m_y) > ccc.starting_y
				and (_m_y) < ccc.ending_y then
					rect(ccc.starting_x-1, ccc.starting_y-2, ccc.ending_x+1, ccc.ending_y+1, 2)
					m_is_on = true
				end
				spr(ccc.item.sprite, c_i.cont_starting_x,current_y)
				print(ccc.item.name, c_i.cont_starting_x+11, current_y, 23)
				print(ccc.item.weight, c_i.cont_starting_x+80, current_y, 23)
				print(ccc.quantity, c_i.cont_starting_x+100, current_y, 23)
				current_y+=10
			end
		else
			rect(cont_icn_b_s_x, cont_icn_b_s_y, cont_icn_b_e_x, cont_icn_b_e_y, 21)
			spr(cc.small_icon, cont_icn_x, cont_icn_y)
		end
		cont_icn_x+=10
	end
end

function show_inventory(c_i)
	if      (_m_x) > _c_x-360
		and (_m_x) < (_c_x-121)
		and (_m_y) > _c_y
		and (_m_y) < (_c_y + 6)
	then
		c_i.oo_ui = false
		c_i.open = true
	else
		c_i.oo_ui = true
	end
	if c_i.open == true then
		spr(140,_c_x-360,_c_y)
		spr(140,(_c_x-240)+1,_c_y)
	else
		spr(132,_c_x-360,_c_y)
		spr(132,(_c_x-240)+1,_c_y)
	end	
	if not ((_m_y) < (_c_y+c_i.max_height)) and 
		((_m_l_b == true
		and c_i.oo_ui == true)
		or (_m_r_b == true 
		and c_i.oo_ui == true))
	then
		c_i.open = false
	end
end

function display_inventory_weight(c_i)
	local s_x = c_i.inv_starting_x-1
	local s_y = _c_y+1
	local p_c = (c_i.total_weight / c_i.capacity) * 100
	local p_r = (7.3/100)*p_c
	local e_x = s_x + p_r
	local e_y = s_y + p_r
	rectfill(s_x, s_y, e_x, e_y, 1)
end

function update_inventory(c_i)
	c_i.inv_starting_x = flr(_c_x-358)
	c_i.cont_starting_x = flr(_c_x-237)
	-- test contents
	show_inventory(c_i)
	if c_i.open then
		display_inventory_contents(c_i)
		display_inventory_weight(c_i)
		if table_length(_containers) > 0 then
			display_container_contents(c_i)
		else
			_debug_message = "enters dealocate selected container"
			c_i.selected_container = 1
		end
	end	
end

:: items.lua
--[[pod_format="raw",created="2024-05-30 22:52:53",modified="2024-06-10 23:09:44",revision=1712]]
item=entity:new({
	sprite = 0,
	name = "",
	amount = 100,
	weight = 1.0,
	item_type = nil
})

consumable=item:new({
	consume = function(self,o,a)
		self.amount -= a
		o.state = "consuming"
	end
})

water_bottle=consumable:new({
	sprite = 188,
	name = "Water Bottle",
	amount = 100,
	weight = 0.8,
	consume = function(self,o,a)
		consumable.consume(self,o,a)
		o.thirst -= a
	end
})

antiseptic=consumable:new({
	sprite = 189,
	name = "Antiseptic",
	amount = 100,
	weight = 0.4,
	consume = function(self,o,a)
		consumable.consume(self,o,a)
		o.wound_health += a
	end
})

pain_killers=consumable:new({
	sprite = 191,
	name = "Painkillers",
	amount = 16,
	weight = 0.05,
	consume = function(self,o,a)
		consumable.consume(self,o,a)
		o.pain -= (a*10)
	end
})

item_types = {
	consumable = 1,
	junk = 2,
	useable = 3,
	special = 4,
	unique = 5,
}
:: main.lua
--[[pod_format="raw",created="2024-05-03 13:26:10",modified="2024-06-10 23:09:44",revision=4011]]
include './util.lua'
include './character.lua'
include './moodles.lua'
include './inventory.lua'
include './static_interactable.lua'

_debug_message = ""

function _init()
	_w_w, _w_h = 480,270
	_tile_size = 32
	c=character:new({})
	m={moodles={}}
	_flagged_tiles = {}
	debug_inv = {}
	add(debug_inv, container_slot:new({ quantity = 1, item = water_bottle:new({})}))
	add(debug_inv, container_slot:new({ quantity = 4, item = antiseptic:new({})}))
	add(debug_inv,container_slot:new({ quantity = 1, item = pain_killers:new({})}))
	i=inventory:new({contents = debug_inv})
	_containers = {}
end

function _draw()
	_m_x, _m_y, _m_b, _m_w_x, _m_w_y = mouse()
	_c_x = c.x + (_w_w/2)
	_c_y = (c.y + (_w_h/2)) - 270
	_m_x = _m_x + (_c_x - _w_w)
	_m_y = _m_y + _c_y
	_m_l_b=_m_b&1>0
	_m_r_b=_m_b&2>0
	_m_m_b=_m_b&4>0
	cls(0)
	camera(c.x - (_w_w/2),c.y - (_w_h/2))
	map()
	display_moodles(m,c)
	temp_update_tiles(i)
	animate_character(c)
	update_inventory(i)
	debug()
end

function _update()
	move_character(c)
	scan_character_area(c)
	update_character_vitals(c)
end

function debug()
	print("debug_message: " .. _debug_message
			.. " c_x: " .. _c_x
			.. " c_y: " .. _c_y, _c_x-480, _c_y+260)
end
:: moodles.lua
--[[pod_format="raw",created="2024-05-07 21:40:35",modified="2024-06-10 23:09:44",revision=3263]]
include './types.lua'
include './util.lua'

moodle=entity:new({
	moodle = "none",
	sprite = 0,
	x = 0,
	y = 0,
})

function get_index(moodles, name)
	for i, m in ipairs(moodles) do
		if m.moodle == name then
			return i
		end
	end
	return -1
end

-- moodle entity, name, value, sprite 1, 2, 3, 4, lower check
function generate_moodle(m, n, v, s1, s2, s3, s4, lc)
	index = get_index(m.moodles, n)
	current_moodle = nil
	new_sprite = -1
	if index != -1 then
		current_moodle = m.moodles[index]
	end
	if lc then
		if v >= 20 and v < 30 then
			new_sprite = s1
		elseif v >= 30 and v < 50 then
			new_sprite = s2
		elseif v >= 50 and v < 70 then
			new_sprite = s3
		elseif v >= 70 then
			new_sprite = s4
		end
	else
		if v < 70 and v >= 50 then
			new_sprite = s1
		elseif v < 50 and v >= 30 then
			new_sprite = s2
		elseif v < 30 and v >= 10 then
			new_sprite = s3
		elseif v < 10 then
			new_sprite = s4
		end
	end
	if current_moodle == nil and new_sprite != nil then
		return moodle:new({moodle=n,sprite=new_sprite})
	elseif current_moodle != nil and current_moodle.sprite != new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle=n,sprite=new_sprite})
	elseif current_moodle != nil and new_sprite == nil then
		del(m.moodles,current_moodle)
		return nil
	elseif current_moodle != nil and current_moodle.sprite == new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle=n,sprite=new_sprite})
	end
	return nil
end

function display_moodles(m,c)
	m.moodles = {}
	h = generate_moodle(
		m, 
		"health", 
		c.health, 
		moodle_sprites.health_1, 
		moodle_sprites.health_2, 
		moodle_sprites.health_3, 
		moodle_sprites.health_4, 
		false)
	if h.sprite > 0 then
		add(m.moodles,h)
	end

	wh = generate_moodle(
		m, 
		"wound_health", 
		c.wound_health, 
		moodle_sprites.wound_health_1, 
		moodle_sprites.wound_health_2, 
		moodle_sprites.wound_health_3, 
		moodle_sprites.wound_health_4,
		false)
	if wh.sprite > 0 then
		add(m.moodles,wh)
	end

	p = generate_moodle(
		m, 
		"pain", 
		c.pain, 
		moodle_sprites.pain_1, 
		moodle_sprites.pain_2, 
		moodle_sprites.pain_3, 
		moodle_sprites.pain_4,
		true)
	if p.sprite > 0 then
		add(m.moodles,p)
	end

	hu = generate_moodle(
		m, 
		"hunger", 
		c.hunger, 
		moodle_sprites.hunger_1, 
		moodle_sprites.hunger_2, 
		moodle_sprites.hunger_3, 
		moodle_sprites.hunger_4,
		true)
	if hu.sprite > 0 then
		add(m.moodles,hu)
	end

	t = generate_moodle(
		m, 
		"thirst", 
		c.thirst, 
		moodle_sprites.thirst_1, 
		moodle_sprites.thirst_2, 
		moodle_sprites.thirst_3, 
		moodle_sprites.thirst_4,
		true)
	if t.sprite > 0 then
		add(m.moodles,t)
	end

	d = generate_moodle(
		m, 
		"delirium",
		c.delirium,
		moodle_sprites.delirium_1, 
		moodle_sprites.delirium_2, 
		moodle_sprites.delirium_3, 
		moodle_sprites.delirium_4,
		true)
	if d.sprite > 0 then
		add(m.moodles,d)
	end
	
	current_y = 2
	for i, moodle in pairs(m.moodles) do
		spr(moodle.sprite, _c_x-18, _c_y + current_y)
		current_y += 20
	end
end

moodle_sprites={
	health_1 = 168,
	health_2 = 169,
	health_3 = 170,
	health_4 = 171,
	wound_health_1 = 160,
	wound_health_2 = 161,
	wound_health_3 = 162,
	wound_health_4 = 163,
	pain_1 = 128,
	pain_2 = 129,
	pain_3 = 130,
	pain_4 = 131,
	delirium_1 = 136,
	delirium_2 = 137,
	delirium_3 = 138,
	delirium_4 = 139,
	hunger_1 = 152,
	hunger_2 = 153,
	hunger_3 = 154,
	hunger_4 = 155,
	thirst_1 = 144,
	thirst_2 = 145,
	thirst_3 = 146,
	thirst_4 = 147,
}
:: static_interactable.lua
--[[pod_format="raw",created="2024-05-23 20:57:56",modified="2024-06-10 23:09:44",revision=2480]]
include './types.lua'
include './util.lua'

_container_id_index = 2

container=entity:new({
	max_capacity = 10,
	container_id = 2,
	small_icon = 0,
	contents = {},
})

function get_container_contents(cont)	
	add(cont.contents, container_slot:new({container_id = 3, quantity = 1, item = water_bottle:new({})}))
	add(cont.contents, container_slot:new({container_id = 3, quantity = 1, item = pain_killers:new({})}))
end


function init_draws_container(ft)
	spr(5,(flr(ft.tile_co.x)*_tile_size), ((flr(ft.tile_co.y)*_tile_size)+16))
	if table_length(_containers) > 0 then
		for i, cont in pairs(_containers) do
			if cont.container_id == _container_id_index then
				return
			end
		end
	end
	local draws = container:new()
	_container_id_index += 1
	draws.container_id = _container_id_index
	draws.small_icon = 6
	draws.x, draws.y  = ft.tile_co.x, ft.tile_co.y
	get_container_contents(draws)
	add(_containers, draws)
	return draws.container_id
end

function temp_update_tiles()
	local is_container_present = false
	for i,ft in pairs(_flagged_tiles) do
		if fget_precalc(ft.flags,1) == true then
			if ft.sprite == 4 then
				init_draws_container(ft)
				is_container_present = true
			end
		end
	end
	if not is_container_present then
		_containers = {}
	end
end
:: types.lua
--[[pod_format="raw",created="2024-05-06 22:22:02",modified="2024-06-10 23:09:44",revision=3185]]
class={
	new=
		function(self,tbl)
			tbl=tbl or {}
			setmetatable(tbl, {
				__index=self
				}
			)
			return tbl
		end,
}

entity=class:new({
	x=0,
	y=0,
})

container_slot=entity:new({
	container_id = 1,
	quantity = 0,
	item = nil,
	starting_x = 0,
	starting_y = 0,
	ending_x = 0,
	ending_y = 0,
})

button={
	up=4,
	down=8,
	left=1,
	right=2,
	down_right=10,
	up_left=5,
	up_right=6,
	down_left=9,
	none=0
}

direction={
	up = 1,
	down = 2,
	left = 3,
	right = 4
}
:: util.lua
--[[pod_format="raw",created="2024-05-03 22:03:54",modified="2024-06-10 23:09:44",revision=3239]]

--object, start frame,
--num frames, speed, flip
function animate_sprite(o, sf, nf, sp, fl)
	if(not o.a_la) o.a_la = sf
	if(not o.a_ct) o.a_ct = 0
	if(not o.a_st) o.a_st = 0
	if(not o.fl) o.fl = false
	o.a_ct += 1
	if o.a_ct % (30/sp) == 0 then
	 o.a_st += 1
	 if(o.a_st == nf) o.a_st = 0
	elseif o.a_la != sf then
	o.a_st = 0
	end

	o.a_fr = sf + o.a_st
	spr(o.a_fr, o.x, o.y, fl)
	o.a_la = sf
end

function collide(o,r,f)
	r = r or 0
	f = f or 0
	if fget2(mget((o.col_point.x/_tile_size) + r, (o.col_point.y/_tile_size)) + r,f) then
		return true
	end
	return false
end

function coalesce(a, b)
	if a == nil then
		return b
	else
		return a
	end
end

function time_since(from, to)
	return flr(to) - flr(from)
end

function fget2(n, f)
	if f then
		return (fget(n)>>f)&1==1
	else
		return fget(n)
	end
end

function fget_precalc(pcf, f)
	return (pcf>>f)&1==1	
end

function table_length(t)
	local length = 0
	for i, c in pairs(t) do
		length+=1
	end
	return length
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjQ4OjQ3Iixtb2RpZmllZD0iMjAyNC0w
Ni0xMCAyMzowOTo0NCIscnVudGltZT03LHdvcmtzcGFjZXM9e3tsb2NhdGlvbj0ibWFpbi5sdWEj
MTIiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImNoYXJhY3Rlci5sdWEjODIiLHdvcmtz
cGFjZV9pbmRleD0xfSx7bG9jYXRpb249InN0YXRpY19pbnRlcmFjdGFibGUubHVhIzQzIix3b3Jr
c3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJpbnZlbnRvcnkubHVhIzY4Iix3b3Jrc3BhY2VfaW5k
ZXg9MX0se2xvY2F0aW9uPSJpdGVtcy5sdWEjMSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlv
bj0ibW9vZGxlcy5sdWEjMTY4Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJ0eXBlcy5s
dWEjMSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0idXRpbC5sdWEjNTUiLHdvcmtzcGFj
ZV9pbmRleD0xfSx7bG9jYXRpb249ImdmeC8wLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2Nh
dGlvbj0ibWFwLzAubWFwIix3b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngi
LHdvcmtzcGFjZV9pbmRleD00fX1dXWx6NAAEAAAAAwAAADBuaWw=
:: [eoc]
