picotron cartridge // www.picotron.net
version 2

:: gfx/
:: map/
:: sfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
Ni0wOSAyMjowMDozOSIscmV2aXNpb249MzY2M11dbHo0AKATAADnYgAA8xh7WzBdPXtibXA9cHh1
AEMgICAE-yD----zLGZsYWdzPTAscGFuX3gIAMx5PTAsem9vbT03fSw1AFUNHxcPEgcAnwwPFw8g
DxIPFwsAfmUNHxf-IA4FAB4NJQAPkwBhIw8gcQEfMXEBFvYBEa8XTyCvFz8gDxevEg8XLwgAdxKv
IA8SLxcIABsXCAAAGAAaIAgAAY8AHxcMAAAACgAeIAwADzAA--8PANQCHw8EACgPEAMcIg8SzgMe
EtUDDwsAewqoAA_vAHgCiwAPhwT-WlAPIPEBjicA8Q8ODQ8SAf0BAX4MDg0OAR3uHQFuDA0ODQEN
-gENAW4VAAMLAA8WAAdUDw39AQsXABX7FwAfCxYAAnMbLg1uDS4bGQC0Cy4NDg1ODQ4NLgs2AFQ_
DW4NPjkAMxvtGxgAAUMAJQ4NAgADLgIfMy4CEf8KFhoEEPcBMAf-FwEHEAce7yAeBwAHDv0BDgcA
BVAPDf4BDA8AEfwPABkMDgBwHC0ObQ4tHBgAkC0ODQ5NDg0OLR8AYAw9Dm0OPQoANxzuHC8AKe0c
HQAPNQAGFu01AE-3BfAz4QAZTyAgBPA7CR1fEBAE8PAxAAscOWUAof8XEq8gPxfPIC9GAhGPSgIB
bwUDXgJ-HxfPIB8X7wgAIA9QAAMiLxdwADP-FyS7Ag8EAAAyLxffkQAPHAACAE0AEb9NAJn-FwD-
IAAvF58WAAJvABF-DAACSgBTvyD-FwQFAAQSABkfMgAAEAA--yAACQAgCEYACngAfz8XnyD-FxKS
AQsfNv4KT0QNHxcBBgBADD3_DL8DDwYAYC4NLRAGDwoBClYNDyANDgIAof0joU2hPQGuAS0EABOt
BAAzrgEuBAAAVQQEBgAAawQEBgAPGAD9Px0ODQIACg_nAQwPLglNEQFIAAIGAAc-Ag8GAGA-Lf4N
DAEc8g8BHe8gHQGtAQ0_DxduDD4NAZ4NAQ0uDA4MTgwODC4PACE_DBoAEK2cB5DBDP0BDAGt8QUZ
ABB_LABPDQENvgwAD8ndAZ0BTfER3QH9AAHPAUABDd4N6QEFAgARHRIAEt0YABEeAgAkLg0mAAAO
ABI_DgAQHQwAIE4NUQABFwBBXg3xAiIAEW4UACEdHnsAAkUAFY5BABKeCgAjHa4SAB__CAAPb-0A
Ad3xEBUFDA8MBwIPNABND0AHJBGP6QUVP5sGHW8NBgIMAAAIABOvawYfLwwAIAhcAAIUADcvF4-L
BlEPIO8Xv4QAE68rBwAoAFN-F08gLxAAMw8XvwgABKwAACoLAhAABDAAFR8MABVvDAAXD8wABkAA
F28MAAOBBws4ABffLAC0-xcJbyAvF-8gAy8iAGQS-yABDxIzAD--IAUJAAULLAAFRgA2-xcJxQA0
-xcEbgBRTyA-F__SABG-PAAZz7oAAVAAGxcQAAMkAAAMABc-HAAUP8oIEBdhAB8RjgklHzFOAgQP
swIgDzQAAw9oACkPNAB5D4MDIeEBXQFdAS0BzQENPyANAdAEAAgFFa4MADwPFQ4UACMMHhIAEQ7N
BBQ_GAAABABYDI4NAV1IABdxDAAuAV1iAAQQACBODdgFAo4A0A1OHQwuDfEDDU4cPg2PDQEuAC3u
DQgAEM0GABPhCgBDbg0MXhsAU24MDQxODAAVfhYAH_4IADtP-QEBzYwFHgHiACf9AW8BE_4IAAAE
ACBOLf8NBhAAZy4dLxMNDBIAkh0ODRwNHgwNTkwBkR0cDQweDC4MTmcBQgwNDgxXBgNoAUkeDA0M
owFILgwNDBAAGj4fABlOHQAf7gwADyT9AQsALvEDFAABKwAA8AAHpQELRAFkDS4dDxWODABDCx0L
fgwAJD4bFgAf7ggAD0-NAf0BFge0DzEAgAC2ArH9CBFNAQ3-IAYNEQIJM54dngoAZI4NHxMNjg0A
UAweDA0evQMCEABVzgwdHA0NADUNHB4NAGO_HT4MDR4NAGOuDRxODC0MAEEMfhwdpwmw-QccHS4N
8QkNHC7jASOtASwAAMgJFgwNAEZuDQwNDgBnLg0OHQwOEQAwHg0MeAAGEQAwDg0MhwAHEQApDC4Q
AABJAwgxAFkuDQwODBEAJwxODgAfjgwAFxTNCgAd4RIACygAP60BTdECDR81WwQAM70BrVoEE55O
AAGKAycdPg4ASB4dHxMQAABSBBhOEAABRwQKIgBKDB4MPiMAGm4gAAMPAACCAHANjg2RDA2BDwAh
-QMWACENfv8KEY6OATUuHQwNAACuBCMcjg4AUw4dDA0MBQEA2AQSvgsAMD0M3QgAIPEFDQA0nQF9
UgBPAQ1eDQwAGhB9HAFAfg3xBg0AIf0EFABPDf4CDQkAAE_dAf0EfwEODxwEIB81ugMeDzEAvgCo
Aok9Ad0BrQE9AaMQER2pASEdDgQABgIABQ4AEB0xABwOMAAACAAKMAAlDQ4CAA8yAAIAYgAV3TQA
VB0BPfEASQA8jQE9PwARbrQCBTkAARAJEA1WBwEXAAdGAAEVA0YMDQwOMQAAGAAjDR48BC8eDVsA
DR5uVAAZjUwAXx0OLQ4dSgAAWQ4tDi0OTAAGEgAITgAHQAAPUgAaBBAAFj1OAAKOA0D9ASGtuQny
Ah4dPh3hDT4NDxMdGx0ODRvdTwCxCw4bDg0bDQsODQvdBJMOCx0uHQseCx7tBFIeGy4bXgwADksJ
D-AEEQA2AE4BDe8gEQgPxwkcIA2uwAgFDAANIwAhDe6qBQ7GCA8IAEwPFwESD8EDHg_FBPVznQHt
AQ0fIPgFEs5-Aw8MAEEBaQAxHg3xVwgA_wQiDR7OEQGIAw8MAGQBhQVA8RH9D10WHA0FAC-9D3gC
DR80gwEeDzEA--_tH-IxAB0v-xzFAB4PMQD--------------9X0FUCvFyAemA4QDrgOAA7IDgAO
GA8gCA0YDQgNKB44DTgNOB4oDRAAEdgCADE4DQgCABAoLQAFDAAAQQC-IA6YDkAeWB5wXkCGADw1
KA8YiACzCBweqCwemDweiEyMADUMDSyMAP8FDA08DgAOSHwOEA4ojA4gHpwOQK6NACHTaC8YDhAO
eD0OAA54TZEA8QQMGAwNDC0eOAwYHQw9HigMCAwdEQDRSI0eOJ0eKK0eGB0ADQIANC0eCAsAMD0e
3QIAL-4BhgAcdP8XAd8YHxcEAJMvGA8gDxgPIB8IAIIvGB8XPxgPIAQADyAAAxffBAATPxgAFw8g
AAQ0AAQEABc-MABP3xj-F7MAGrR3BgT-F2j-IGUfFwUAvA8XAA7-IGMOIP5jtxHzAC00LjA1OTUy
MzgwOTUyNFkAoi04LjcxOTA0NzYGAAJoABkyaADRdBIEEP8UYCD_YgD_-wEAf04A-mIg-mAaEgwf
MisDHS8xMDIALwFLAvELnx4OEA69DgAOzQ4ADh0HXQctHh0nPScdHi0MAAAfAjANvyATHP4KlwwN
DgAODQx3DA0OEA4dfB0OIA6dDkAeXVMDD3wAMYAdAh69Eh6tIn8AEQJ-ABMCfwAQEi4AznwiDhAO
PXIOIB4NgkYDD4AAEyBvHkUAcX0yDgAOfUKDAPcJPRIHIh4dJx0SJxIeLQcdMgciHk2CHj2ShQAg
Hh2DAL8eDRJ8Ih7SHtL_AXsAHUD-FwHSOgDDHiIHUgciHhInMicSDAAAFgAQAmoA7wINlw0CHhIN
dw0SHiJ9aQAhIHdE8gIgjyDiKBA2BQAQAgUAAeUoQUUfF097JRE-7SQFJAAiPyAZADFPIA8EABUf
KSUDMgAXrxUACTYAEx8ZAAA2ADFfID8QABQ-OgACzSQC_SQT390kGk9CABEvXCYAPgBjfyAvF18g
pgMNvgA0-xdpvwMPBQD2D8gECEY3LjUzAQADLwJkLTEuMzE2AQAfN8YEBh8TxgQQTzU0LjNiAAAZ
MBYALzM05iEkD_QENvILnA4QDrwOAA48PyBMDgAOLA08DTwePF08HjwKAAgGAAEWACE-EKkH-gQs
DTsNLA4QDjw9PA4gDpwOQB5c7AQPhAAxMSwPEAgAIRwbBwDDDCsePF07HjwNOw07hwAACADPPD1L
DhAOLIsOIB6b8wQlgnwfEA4QDowtigAQDEIIsiwLPAs9HjxbPR48CgAHBgDhLA1bPR4cHQs9Cz0e
DC0HAD5NO00zCA-4BBRA3xAfFwQA8QBPED8gTxAfFz8QDyA8Dj8KAKlePR8XPQ48Dj0bBgAQXgoA
JD0OBgCPTT5NG90b3ft_AB4v8PAyALMBxgH3BZsOEA67DgAOSy8gSw4ADlsNWx5rBAD_HFsNCQ1L
HksNKQ07HjsNSQ0rDgAOKw1JDRsOEA47DSkNKw4gDjstKw5AHlvQAg_DAC1xSwMeaw07E4UAIRsj
hgARM4YAEyOGAAAIAACGAM8zDhAOKwMtQw4gHpPPAiVyexMOEA6LI4gAIQsziQBhC0Meaw1TBADh
WwMNUx5LAw0JDUMeOwOKACArA4MAMR4bEwcAIQszFQBfUy1DHtPSAiLJ0x7THlMvIEMeYw1TBAAR
U3UAEUNfABEzbAACBgAfQ3EAKS-w8DIAswG8AfERmg4QDroOAA7KDgAOWg8gWh5aDQoNSh5qDVoe
2h46DQoCAJUqHiqNGh4aDQgCALMKDgAOGo0KDhAOKiQAnhoOIA6aDkAeWs0CD4sAKbU6Dxkeag06
HB6qLI8AWSweKo0cjwARDI8AMRwOAI8AEQzvDT4QDireDQ_PABhweh8ZDhAOiqUFIoo9kwDxAgpN
HloMCgxNHmoMXR5afR46OiMA4A11KowdHhoMCAIAlQ0eGg2MHR4KLSIAD64FJjQZHxcEAPcCbxkP
IF8ZHxdfGQ8gDxkPIE8UAAAgABM-GAAEBAD0Ay8ZHxcvGY8gHxkfFx8ZDyAIDgIAEQ8aACCOHe4F
AfQifw4tHN0c3fwNA_v1CpcOEA63DgAOVwhXDgAORyhHHlcoRx5HSDcEAAAQABFnHgARtywAfiAO
lw5AHlf0Ag9yACzwBycPEh5HSBcdHkdIBy0eVygHPR5nCAdmECBnXS8Av20OEA43fQ4gHgeN4AIl
gXcfEg4QDoctfgAhFz1-AJVNHlcoTR5HSD0EAP8ANx0oTR4nPQhdHhe9HgfNxwInMBIfFwQAoG8S
CF4fF14oTh0EADVOSD4EAAAQAFJuCF4d3gIAH-2LAiAPMgD---8L-xEICAQgFlAXQA8cDxAfHCAO
LxAeEB4NLhAXDScQXhBeAE0AHvIEHyBQBQ8VQAUuIAUOBy4QBSceEAkAAQUAH05RAB-yAhZABhAG
YAYQFxAGIAcABxAHBgAQAAIATxcgB1BRAB3-C0AoMDggBygPGBAnCA4QNwYQNwYgJwYwFwZAawE9
HzYxAF1fEgTw-xEyABzwIDB-F2AOcQ5ADpEOIA4RFQFFEQ4QDgEFDxYPIAUvFg8gDxYFAQ4QDgUd
DyA9DB0FHQBQHQU9BR0VADARfRE1APABXREOMA4CcQIOIA4CHxVRGwsU4AIbHR8YCx0rAh4rLQot
IQ--EBsVCBsVKw4gHnEeQA5xDlAOIR4hDmAPEx8REBkPEzC3AHZACA8YW7YAMQgKW7YA0Ao7LQUO
EB5xDQUOMA68AA_4ACov8ARwAWIPtABDECC2ACIfFggAArcAAA4AET8WAAG7AKENDyAFDB0MBQwN
wAB-BQ0FHQUNBcYAYA59Aw8xAG4PrgMuO7EOEAQAMCAOkVUBIX8VVgERnVMBjL0CHt0OAA69egNf
LxMQLDB-AFYRnRECSB5xDAVGA08vExArjgIfDwQBLg4AAQ98AI4OjwIPMQCfB0ACMIEOMEkERAVB
DiD9BHEPFgENIQ4g_gQwHQEFCwBAAR0FHSIAMBE9QTAAkS0xDkAOAjEfFToEMBwRTGUBYBwdDxgd
PHsVEE0IFsAcFQgVLA5AHmEOYA4EAKAhDiEOcB8RDxMABQAfQLM9DA_wAEEgUQIGAFIfFTEcArAA
UAgPGDwCsQAyLQgLswDPCxwtBQ4wHlENBQ5QtgAwL-AEZwFaD60ARAFVBg_uAAFRDQwFDA2wAE8F
DQUNswAAMBsRS7MAEBuzABA7yBRATTsOIEoGLxUrswAiDygDHg8xAI4PigNiAWwBEYAFAA_tAISw
UA5hYA5BDgEPE2AiAp8PEVAbDxNQC0BcAYwCygI_IQ6wzQIPXAF6IQ5QZQBQIT4hDkCrAD8wHxHH
CT8vMTAyAJEHeAEASggPeA1aAEELTh4hDrBECw_2AIkgIR4uAm8OYAkfEYC2AB0v8AS3CS4gLxMz
AS8sMHsAYI8hHi8TDmAsgMYCHw8yALELdAIPQgEFQZ8VDiCuJBHdPAEwnS8WbgwQHG8EIB4hwAGf
ER4rDmAuEC4wfwCcL-AEgAAgBbYCPxEeLHcAmA5QAg8yAKMLNQJQER8WAU0pBRAtFgUQLQkAEgwI
ACwBnRkFkQ8VcQsOIA4rURcgACwMFmuMEkAdCjs9WAIYHVgCHinhAQ_iALMv8ASjADQAWwYWO1oG
RB0IGx1aBg_eAD5BHQ8gDdwrGB2iACINDBUAHw2qAF8PvgIPHzYxAI4PrgIpERNhAXAPFQsKUQsa
CSAAsgKwKgsqHiotCAkKCzoiILkdCSoLPQ4QDgthC7kCHidxAQ_sALwv8AStACw0HxULrACiHxgK
HToeKi0JLakAvwgaHSoOIA4LcQsOogA-AmgDMwANAGgDFgBoAwA8Lw_uAFJQbT02fX0=
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
Ni0wOSAyMjowMDozOSJdXWx6NAAEAAAAAwAAADBuaWw=
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
Ni0wOSAyMjowMDozOSIscmV2aXNpb249MzQ1Ml1dbHo0ANkAAAB2EAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD-AF8xMDAwMgQAABM0CAAvMzCAAE4AYwATMggAojE5MDAyOTAwMGMQ
AA_AAFEAcABmMjgwMDE4jAAjMTiIAA_AAFAmMTl4ABMzdwEAfAAfMYAAUQBkAB9hBAAIL2IwAQD-
---------------E9Q0iKSxoaWRkZW49ZmFsc2UscGFuX3g9LTE5MS42AQARNxcAo3k9LTQxMy41
ODMBALI0LHRpbGVfaD0zMgoAEHcKAIB6b29tPTF9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
Ni0wOSAyMjowMDozOSJdXWx6NAAEAAAAAwAAADBuaWw=
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
Ni0wOSAyMjowMDozOSIscmV2aXNpb249MzI4M11dbHo0ACcBAADtFwAA-yxweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAUGBwAP-5AICQoLDwwPDQ8ODw8AD--w-wEA6-8n0gEQBg8g
EAEgASAB8AACEAIMEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMMAAcIg9AMQCD
D2-gAhACDz0zAE-wxw9CYgAdDzAA------9FH-8BAKz-XcgPQAACQB8TDxQPFQ8WDxcPGA8aDx0M
DyQPKQ8vDzMPOA88D0EPRQ9IH0oPRw9FD0EPPw89DzcPMg8vDywPKP--EfIP-hEPPQ8-X0BfPw8_
Dz1PPB87HzovOV84DzkeAf4K8HAPQAAPEED_sAoA--------------------fFD_sPD-OQ==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
Ni0wOSAyMjowMDozOSJdXWx6NAAEAAAAAwAAADBuaWw=
:: character.lua
--[[pod_format="raw",created="2024-05-05 22:21:00",modified="2024-06-09 22:00:39",revision=3555]]
include './types.lua'
include './util.lua'

character=entity:new({
	x=160,
   y=135,
   max_width = 16,
   max_height = 18,
   col_point = { x=0, y=0 },
   select_point = { x=0, y=0},
	i_dir = direction.up,
	spd=0.65,
	health = 90,
	wound_health = 90,
	pain = 10,
	hunger = 10,
	thirst = 50,
	delirium = 0,
	d_i_f = {sf = 196, nf = 4, s = 1, fl = false},
	u_i_f = {sf = 204, nf = 4, s = 1, fl = false},
	l_i_f = {sf = 212, nf = 4, s = 1, fl = false},
	r_i_f = {sf = 212, nf = 4, s = 1, fl = true},
	d_m_f = {sf = 228, nf = 2, s = 2, fl = false},
	u_m_f = {sf = 230, nf = 2, s = 2, fl = false},
	l_m_f = {sf = 220, nf = 4, s = 2, fl = false},
	r_m_f = {sf = 220, nf = 4, s = 2, fl = true},
	state = "idle",
	start_idle = nil,
	start_move = nil,
})

function move_character(c)
	_btn = btn()
	if _btn != button.none then
		c.state, c.start_move = "moving", time()
		c.col_point = { x = (c.x+(c.max_width/2)), y = (c.y+(c.max_height/2)) }
		if _btn == button.down_right then
			c.i_dir = direction.down
			c.col_point = { x = c.x+c.max_width, y = c.y+c.max_height}
			if collide(c) == false then
				c.y, c.x = c.y + (0.50 * c.spd), c.x + (1 * c.spd)
			end
		elseif _btn == button.up_left then
			c.i_dir = direction.up
			c.col_point = { x = c.x, y = c.y}
			if collide(c) == false then
				c.y, c.x = c.y - (0.50 * c.spd), c.x - (1 * c.spd)
			end
		elseif _btn == button.up_right then
			c.i_dir = direction.up
			c.col_point = { x = c.x+c.max_width, y = c.y }
			if collide(c) == false then
				c.y, c.x = c.y - (0.50 * c.spd), c.x + (1 * c.spd)
			end
		elseif _btn == button.down_left then
			c.i_dir = direction.down
			c.col_point = { x = c.x+1, y = c.y+c.max_height}
			if collide(c) == false then
				c.y, c.x = c.y + (0.50 * c.spd), c.x - (1 * c.spd)
			end
		elseif _btn == button.right then
			c.i_dir = direction.right
			c.col_point = { x = c.x+c.max_width, y = c.y+(c.max_height/2)}
			if collide(c) == false then
				c.x = c.x + (1 * c.spd)
			end
		elseif _btn == button.left then
			c.i_dir = direction.left
			c.col_point =  { x = c.x, y = c.y+(c.max_height/2)}
			if collide(c) == false then
				c.x = c.x - (1 * c.spd)
			end
		elseif _btn == button.down then
			c.i_dir = direction.down
			c.col_point = { x = c.x+(c.max_width/2), y = c.y+c.max_height}
			if collide(c) == false then
				c.y = c.y + (1 * c.spd)
			end
		elseif _btn == button.up then
			c.i_dir = direction.up
			c.col_point = { x = c.x+(c.max_width/2), y = c.y}
			if collide(c) == false then
				c.y = c.y - (1 * c.spd)
			end
		end
	else
		c.state = "idle"
		c.col_point = { x = (c.x+(c.max_width/2)), y = (c.y+(c.max_height/2)) }
		c.start_idle = time()
	end
	c.select_point = { x = (c.x+(c.max_width/2)), y = (c.y+(c.max_height/2)) }
end

function animate_character(c)
	if c.state == "idle" then
		if c.i_dir == direction.down then
			animate_sprite(
				c,
				c.d_i_f.sf,
				c.d_i_f.nf,
				c.d_i_f.s,
				c.d_i_f.fl
			)
		elseif c.i_dir == direction.up then
			animate_sprite(
				c,
				c.u_i_f.sf,
				c.u_i_f.nf,
				c.u_i_f.s,
				c.u_i_f.fl
			)
		elseif c.i_dir == direction.left then
			animate_sprite(
				c,
				c.l_i_f.sf,
				c.l_i_f.nf,
				c.l_i_f.s,
				c.l_i_f.fl
			)
		elseif c.i_dir == direction.right then
			animate_sprite(
				c,
				c.r_i_f.sf,
				c.r_i_f.nf,
				c.r_i_f.s,
				c.r_i_f.fl
			)
		end
	end
	if c.state == "moving" then
		if c.i_dir == direction.right then
			animate_sprite(
				c,
				c.r_m_f.sf,
				c.r_m_f.nf,
				c.r_m_f.s,
				c.r_m_f.fl
			)
		elseif c.i_dir == direction.left then
			animate_sprite(
				c,
				c.l_m_f.sf,
				c.l_m_f.nf,
				c.l_m_f.s,
				c.l_m_f.fl
			)
		elseif c.i_dir == direction.down then
			animate_sprite(
				c,
				c.d_m_f.sf,
				c.d_m_f.nf,
				c.d_m_f.s,
				c.d_m_f.fl
			)
		elseif c.i_dir == direction.up then
			animate_sprite(
				c,
				c.u_m_f.sf,
				c.u_m_f.nf,
				c.u_m_f.s,
				c.u_m_f.fl
			)
		end	
	end
end

function scan_character_area(c)
	local current_cel = { x = c.select_point.x/_tile_size, y = c.select_point.y/_tile_size}
	local tr_co = { x = current_cel.x + 1, y = current_cel.y - 1 }
	local tr_spr = mget(tr_co.x, tr_co.y)
	local tr_f = fget(tr_spr)
	local tl_co = { x = current_cel.x - 1, y = current_cel.y - 1 }
	local tl_spr = mget(tl_co.x, tl_co.y)
	local tl_f = fget(tl_spr)
	local t_co = { x = current_cel.x, y = current_cel.y - 1 }
	local t_spr = mget(t_co.x, t_co.y)
	local t_f = fget(t_spr)
	local r_co = { x = current_cel.x + 1, y = current_cel.y }
	local r_spr = mget(r_co.x, r_co.y)
	local r_f = fget(r_spr)
	local l_co = { x = current_cel.x - 1, y = current_cel.y }
	local l_spr = mget(l_co.x, l_co.y)
	local l_f = fget(l_spr)
	local br_co = { x = current_cel.x + 1, y = current_cel.y + 1 }
	local br_spr = mget(br_co.x, br_co.y)
	local br_f = fget(br_spr)
	local bl_co = { x = current_cel.x - 1, y = current_cel.y +1 }
	local bl_spr = mget(bl_co.x, bl_co.y)
	local bl_f = fget(bl_spr)
	local b_co = { x = current_cel.x, y = current_cel.y + 1 }
	local b_spr = mget(b_co.x, b_co.y)
	local b_f = fget(b_spr)
	local c_co = { x = current_cel.x, y = current_cel.y }
	local c_spr = mget(c_co.x, br_co.y)
	local c_f = fget(c_spr)
	
	if tr_f != 0 then
		add(_flagged_tiles,{ tile_co = tr_co, sprite = tr_spr, flags = tr_f })
	end
	if tl_f != 0 then
		add(_flagged_tiles,{ tile_co = tl_co, sprite = tl_spr, flags = tl_f })
	end
	if t_f != 0 then
		add(_flagged_tiles,{ tile_co = t_co, sprite = t_spr, flags = t_f })
	end
	if r_f != 0 then
		add(_flagged_tiles,{ tile_co = r_co, sprite = r_spr, flags = r_f })
	end
	if l_f != 0 then
		add(_flagged_tiles,{ tile_co = l_co, sprite = l_spr, flags = l_f })
	end
	if br_f != 0 then
		add(_flagged_tiles,{ tile_co = br_co, sprite = br_spr, flags = br_f })
	end
	if bl_f != 0 then
		add(_flagged_tiles,{ tile_co = bl_co, sprite = bl_spr, flags = bl_f })
	end
	if b_f != 0 then
		add(_flagged_tiles,{ tile_co = b_co, sprite = b_spr, flags = b_f })
	end
	if c_f != 0 then
		add(_flagged_tiles,{ tile_co = c_co, sprite = c_spr, flags = c_f })
	end
end

function update_character_vitals(c)
	if c.state == "idle" and c.health < 70 then
		last_update_move, current_update = 0, time_since(start_idle, time())
		if current_update != last_update_idle then
			last_update_idle = current_update
			c.health += 0.05
			c.hunger += 0.01
			c.thirst += 0.02
			if c.wound_health < 50 then
				c.wound_health += 0.01
			end
			if c.pain > 50 then
				c.pain -= 0.05
			end
		end
	end
	if c.state == "moving" then
		last_update_idle, current_update = 0, time_since(start_move, time())
		if current_update != last_update_move then
			last_update_move = current_update
			c.health -= 0.65
			c.wound_health -= 0.25
			c.pain += 0.1
			c.hunger += 0.1
			c.thirst += 0.1
		end
	end
	if c.health < 50 
		and c.wound_health < 50 
		and c.pain > 70 
		and c.hunger > 50 
		and c.thirst > 50 then
		last_update_idle, current_update = 0, time_since(start_move, time())
		if current_update != last_update_move then
			last_update_move = current_update
			c.delirium += 0.1
		end
	end
end

:: inventory.lua
--[[pod_format="raw",created="2024-05-14 20:53:29",modified="2024-06-09 22:00:39",revision=2930]]
include './types.lua'
include './util.lua'
include './items.lua'

inventory=entity:new({
	max_width = 119,
	max_height = 68,
	max_capacity = 10,
	inv_starting_x = 0,
	cont_starting_x = 0,
	oo_ui = true,
	open = false,
	total_weight = 0,
	capacity = 10,
	contents={},
})

function add_to_inventory(c_i,item)
	existing_item = nil
	for i, s in pairs(c_i.contents) do
		if s.item.sprite == item.sprite then
			existing_item = s
			del(c_i.contents, s)
		end
	end
	if existing_item then
		existing_item.quantity += 1
		add(c_i.contents, existing_item)
	else
		slot = container_slot:new({quantity = 1, item = item})
		add(c_i.contents, slot)
	end
end

function display_inventory_contents(c_i)
	local current_y = flr(_c_y+13)
	print("Inventory", c_i.inv_starting_x+11, current_y-11, 23)
	c_i.total_weight = 0
	for i, c in pairs(c_i.contents) do
		c.starting_x = c_i.inv_starting_x
		c.starting_y = current_y
		c.ending_x = c_i.inv_starting_x+114
		c.ending_y = current_y+8
		if (_m_x) > c.starting_x
			and (_m_x) < c.ending_x
			and (_m_y) > c.starting_y
			and (_m_y) < c.ending_y then
			rect(c.starting_x-1, c.starting_y-2, c.ending_x+1, c.ending_y+1, 2)
		end
		spr(c.item.sprite,c_i.inv_starting_x,current_y, 23)
		print(c.item.name,c_i.inv_starting_x+11, current_y, 23)
		print(c.item.weight, c_i.inv_starting_x+80, current_y, 23)
		print(c.quantity, c_i.inv_starting_x+103, current_y, 23)
		current_y+=10
		c_i.total_weight += (c.item.weight*c.quantity)
	end
end

function display_container_contents(c_i)
	local current_y = flr(_c_y+13)
	print("Container(s)", c_i.cont_starting_x+11, current_y-11, 23)
	for i, cc in pairs(c_i.container_contents) do
		local m_is_on = false
		cc.starting_x = c_i.cont_starting_x
		cc.starting_y = current_y
		cc.ending_x = c_i.cont_starting_x+114
		cc.ending_y = current_y+8
		if (_m_x) > cc.starting_x
			and (_m_x) < cc.ending_x
			and (_m_y) > cc.starting_y
			and (_m_y) < cc.ending_y then
			rect(cc.starting_x-1, cc.starting_y-2, cc.ending_x+1, cc.ending_y+1, 2)
			m_is_on = true
		end
		spr(cc.item.sprite, c_i.cont_starting_x,current_y)
		print(cc.item.name, c_i.cont_starting_x+11, current_y, 23)
		print(cc.item.weight, c_i.cont_starting_x+80, current_y, 23)
		print(cc.quantity, c_i.cont_starting_x+100, current_y, 23)
		current_y+=10
		if _m_l_b and m_is_on then
			c_i.add_to_inventory(c_i,cc.item)
			for k, ccc in pairs(_containers) do
				if ccc.container_id == cc.container_id then
					if cc.quantity > 1 then
						for l, ccci in ccc.contents do
							if cc.item.sprite == ccci.item.sprite then
								ccci.quantity -= 1
								cc.quantity -= 1
							end
						end
					else
						del(ccc, cc)
						del(c_i.container_contents, cc)
					end 
				end
			end
		end
	end
end

function show_inventory(c_i)
	if      (_m_x) > _c_x-360
		and (_m_x) < (_c_x-121)
		and (_m_y) > _c_y
		and (_m_y) < (_c_y + 6)
	then
		c_i.oo_ui = false
		c_i.open = true
	else
		c_i.oo_ui = true
	end
	if c_i.open == true then
		spr(140,_c_x-360,_c_y)
		spr(140,(_c_x-240)+1,_c_y)
	else
		spr(132,_c_x-360,_c_y)
		spr(132,(_c_x-240)+1,_c_y)
	end	
	if not ((_m_y) < (_c_y+c_i.max_height)) and 
		((_m_l_b == true
		and c_i.oo_ui == true)
		or (_m_r_b == true 
		and c_i.oo_ui == true))
	then
		c_i.open = false
	end
end

function display_inventory_weight(c_i)
	local s_x = c_i.inv_starting_x-1
	local s_y = _c_y+1
	local p_c = (c_i.total_weight / c_i.capacity) * 100
	local p_r = (7.3/100)*p_c
	local e_x = s_x + p_r
	local e_y = s_y + p_r
	rectfill(s_x,s_y, e_x, e_y, 1)
end

function update_inventory(c_i)
	c_i.inv_starting_x = flr(_c_x-358)
	c_i.cont_starting_x = flr(_c_x-237)
	-- test contents
	show_inventory(c_i)
	if c_i.open then
		c_i.display_inventory_contents(c_i)
		c_i.display_inventory_weight(c_i)
		c_i.display_container_contents(c_i)
	end	
end

:: items.lua
--[[pod_format="raw",created="2024-05-30 22:52:53",modified="2024-06-09 22:00:39",revision=1536]]
item=entity:new({
	sprite = 0,
	name = "",
	amount = 100,
	weight = 1.0,
	item_type = nil
})

consumable=item:new({
	consume = function(self,o,a)
		self.amount -= a
		o.state = "consuming"
	end
})

water_bottle=consumable:new({
	sprite = 188,
	name = "Water Bottle",
	amount = 100,
	weight = 0.8,
	consume = function(self,o,a)
		consumable.consume(self,o,a)
		o.thirst -= a
	end
})

antiseptic=consumable:new({
	sprite = 189,
	name = "Antiseptic",
	amount = 100,
	weight = 0.4,
	consume = function(self,o,a)
		consumable.consume(self,o,a)
		o.wound_health += a
	end
})

pain_killers=consumable:new({
	sprite = 191,
	name = "Painkillers",
	amount = 16,
	weight = 0.05,
	consume = function(self,o,a)
		consumable.consume(self,o,a)
		o.pain -= (a*10)
	end
})

item_types = {
	consumable = 1,
	junk = 2,
	useable = 3,
	special = 4,
	unique = 5,
}
:: main.lua
--[[pod_format="raw",created="2024-05-03 13:26:10",modified="2024-06-09 22:00:39",revision=3838]]
include './util.lua'
include './character.lua'
include './moodles.lua'
include './inventory.lua'
include './static_interactable.lua'

_debug_message = ""

function _init()
	_w_w, _w_h = 480,270
	_tile_size = 32
	c=character:new({})
	m={moodles={}}
	_flagged_tiles = {}
	debug_inv = {}
	add(debug_inv, container_slot:new({ quantity = 1, item = water_bottle:new({})}))
	add(debug_inv, container_slot:new({ quantity = 4, item = antiseptic:new({})}))
	add(debug_inv,container_slot:new({ quantity = 1, item = pain_killers:new({})}))
	i=inventory:new({contents = debug_inv})
	_containers = {}
end

function _draw()
	_m_x, _m_y, _m_b, _m_w_x, _m_w_y = mouse()
	_c_x = c.x + (_w_w/2)
	_c_y = (c.y + (_w_h/2)) - 270
	_m_x = _m_x + (_c_x - _w_w)
	_m_y = _m_y + _c_y
	_m_l_b=_m_b&1>0
	_m_r_b=_m_b&2>0
	_m_m_b=_m_b&4>0
	cls(0)
	camera(c.x - (_w_w/2),c.y - (_w_h/2))
	map()
	display_moodles(m,c)
	scan_character_area(c)
	temp_update_tiles(i)
	animate_character(c)
	update_inventory(i)
	debug()
end

function _update()
	move_character(c)
	update_character_vitals(c)
end

function debug()
	print("debug_message: " .. _debug_message
			.. " c_x: " .. _c_x
			.. " c_y: " .. _c_y, _c_x-480, _c_y+260)
end
:: moodles.lua
--[[pod_format="raw",created="2024-05-07 21:40:35",modified="2024-06-09 22:00:39",revision=3089]]
include './types.lua'
include './util.lua'

moodle=entity:new({
	moodle = "none",
	sprite = 0,
	x = 0,
	y = 0,
})

function get_index(moodles, name)
	for i, m in ipairs(moodles) do
		if m.moodle == name then
			return i
		end
	end
	return -1
end

-- moodle entity, name, value, sprite 1, 2, 3, 4, lower check
function generate_moodle(m, n, v, s1, s2, s3, s4, lc)
	index = get_index(m.moodles, n)
	current_moodle = nil
	new_sprite = -1
	if index != -1 then
		current_moodle = m.moodles[index]
	end
	if lc then
		if v >= 20 and v < 30 then
			new_sprite = s1
		elseif v >= 30 and v < 50 then
			new_sprite = s2
		elseif v >= 50 and v < 70 then
			new_sprite = s3
		elseif v >= 70 then
			new_sprite = s4
		end
	else
		if v < 70 and v >= 50 then
			new_sprite = s1
		elseif v < 50 and v >= 30 then
			new_sprite = s2
		elseif v < 30 and v >= 10 then
			new_sprite = s3
		elseif v < 10 then
			new_sprite = s4
		end
	end
	if current_moodle == nil and new_sprite != nil then
		return moodle:new({moodle=n,sprite=new_sprite})
	elseif current_moodle != nil and current_moodle.sprite != new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle=n,sprite=new_sprite})
	elseif current_moodle != nil and new_sprite == nil then
		del(m.moodles,current_moodle)
		return nil
	elseif current_moodle != nil and current_moodle.sprite == new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle=n,sprite=new_sprite})
	end
	return nil
end

function display_moodles(m,c)
	m.moodles = {}
	h = generate_moodle(
		m, 
		"health", 
		c.health, 
		moodle_sprites.health_1, 
		moodle_sprites.health_2, 
		moodle_sprites.health_3, 
		moodle_sprites.health_4, 
		false)
	if h.sprite > 0 then
		add(m.moodles,h)
	end

	wh = generate_moodle(
		m, 
		"wound_health", 
		c.wound_health, 
		moodle_sprites.wound_health_1, 
		moodle_sprites.wound_health_2, 
		moodle_sprites.wound_health_3, 
		moodle_sprites.wound_health_4,
		false)
	if wh.sprite > 0 then
		add(m.moodles,wh)
	end

	p = generate_moodle(
		m, 
		"pain", 
		c.pain, 
		moodle_sprites.pain_1, 
		moodle_sprites.pain_2, 
		moodle_sprites.pain_3, 
		moodle_sprites.pain_4,
		true)
	if p.sprite > 0 then
		add(m.moodles,p)
	end

	hu = generate_moodle(
		m, 
		"hunger", 
		c.hunger, 
		moodle_sprites.hunger_1, 
		moodle_sprites.hunger_2, 
		moodle_sprites.hunger_3, 
		moodle_sprites.hunger_4,
		true)
	if hu.sprite > 0 then
		add(m.moodles,hu)
	end

	t = generate_moodle(
		m, 
		"thirst", 
		c.thirst, 
		moodle_sprites.thirst_1, 
		moodle_sprites.thirst_2, 
		moodle_sprites.thirst_3, 
		moodle_sprites.thirst_4,
		true)
	if t.sprite > 0 then
		add(m.moodles,t)
	end

	d = generate_moodle(
		m, 
		"delirium",
		c.delirium,
		moodle_sprites.delirium_1, 
		moodle_sprites.delirium_2, 
		moodle_sprites.delirium_3, 
		moodle_sprites.delirium_4,
		true)
	if d.sprite > 0 then
		add(m.moodles,d)
	end
	
	current_y = 2
	for i, moodle in pairs(m.moodles) do
		spr(moodle.sprite, _c_x-18, _c_y + current_y)
		current_y += 20
	end
end

moodle_sprites={
	health_1 = 168,
	health_2 = 169,
	health_3 = 170,
	health_4 = 171,
	wound_health_1 = 160,
	wound_health_2 = 161,
	wound_health_3 = 162,
	wound_health_4 = 163,
	pain_1 = 128,
	pain_2 = 129,
	pain_3 = 130,
	pain_4 = 131,
	delirium_1 = 136,
	delirium_2 = 137,
	delirium_3 = 138,
	delirium_4 = 139,
	hunger_1 = 152,
	hunger_2 = 153,
	hunger_3 = 154,
	hunger_4 = 155,
	thirst_1 = 144,
	thirst_2 = 145,
	thirst_3 = 146,
	thirst_4 = 147,
}
:: static_interactable.lua
--[[pod_format="raw",created="2024-05-23 20:57:56",modified="2024-06-09 22:00:39",revision=2274]]
include './types.lua'
include './util.lua'

_container_id_index = 2

container=entity:new({
	max_capacity = 10,
	container_id = 2,
	contents = {},
})

function get_container_contents(cont)	
	cont.contents = {}
	add(cont.contents, container_slot:new({container_id = 3, quantity = 1, item = water_bottle:new({})}))
	add(cont.contents, container_slot:new({container_id = 3, quantity = 1, item = pain_killers:new({})}))
end


function init_draws_container(ft)
	spr(5,(flr(ft.tile_co.x)*_tile_size), ((flr(ft.tile_co.y)*_tile_size)+16))
	if table_length(_containers) > 0 then
		for i, cont in pairs(_containers) do
			if cont.x == ft.tile_co.x and cont.y == ft.tile_co.y then
				return
			end
		end
	end
	local draws = container:new({x=ft.tile_co.x, y=ft.tile_co.y})
	_container_id_index += 1
	c.container_id = _container_id_index
	add(_containers, c)
end

function temp_update_tiles()
	for i,ft in pairs(_flagged_tiles) do
		if fget_precalc(ft.flags,1) == true then
			if ft.sprite == 4 then
				init_draws_container(ft)
			end
		end
	end
end
:: types.lua
--[[pod_format="raw",created="2024-05-06 22:22:02",modified="2024-06-09 22:00:39",revision=3013]]
class={
	new=
		function(self,tbl)
			tbl=tbl or {}
			setmetatable(tbl, {
				__index=self
				}
			)
			return tbl
		end,
}

entity=class:new({
	x=0,
	y=0,
})

container_slot=entity:new({
	container_id = 1,
	quantity = 0,
	item = nil,
	starting_x = 0,
	starting_y = 0,
	ending_x = 0,
	ending_y = 0,
})

button={
	up=4,
	down=8,
	left=1,
	right=2,
	down_right=10,
	up_left=5,
	up_right=6,
	down_left=9,
	none=0
}

direction={
	up = 1,
	down = 2,
	left = 3,
	right = 4
}
:: util.lua
--[[pod_format="raw",created="2024-05-03 22:03:54",modified="2024-06-09 22:00:39",revision=3067]]

--object, start frame,
--num frames, speed, flip
function animate_sprite(o, sf, nf, sp, fl)
	if(not o.a_la) o.a_la = sf
	if(not o.a_ct) o.a_ct = 0
	if(not o.a_st) o.a_st = 0
	if(not o.fl) o.fl = false
	o.a_ct += 1
	if o.a_ct % (30/sp) == 0 then
	 o.a_st += 1
	 if(o.a_st == nf) o.a_st = 0
	elseif o.a_la != sf then
	o.a_st = 0
	end

	o.a_fr = sf + o.a_st
	spr(o.a_fr, o.x, o.y, fl)
	o.a_la = sf
end

function collide(o,r,f)
	r = r or 0
	f = f or 0
	if fget2(mget((o.col_point.x/_tile_size) + r, (o.col_point.y/_tile_size)) + r,f) then
		return true
	end
	return false
end

function coalesce(a, b)
	if a == nil then
		return b
	else
		return a
	end
end

function time_since(from, to)
	return flr(to) - flr(from)
end

function fget2(n, f)
	if f then
		return (fget(n)>>f)&1==1
	else
		return fget(n)
	end
end

function fget_precalc(pcf, f)
	return (pcf>>f)&1==1	
end

function table_length(t)
	local length = 0
	for i, c in pairs(t) do
		length+=1
	end
	return length
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjQ4OjQ3Iixtb2RpZmllZD0iMjAyNC0w
Ni0wOSAyMjowMDozOSIscnVudGltZT03LHdvcmtzcGFjZXM9e3tsb2NhdGlvbj0ibWFpbi5sdWEj
NDUiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImNoYXJhY3Rlci5sdWEjODIiLHdvcmtz
cGFjZV9pbmRleD0xfSx7bG9jYXRpb249InN0YXRpY19pbnRlcmFjdGFibGUubHVhIzMyIix3b3Jr
c3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJpbnZlbnRvcnkubHVhIzE0MyIsd29ya3NwYWNlX2lu
ZGV4PTF9LHtsb2NhdGlvbj0iaXRlbXMubHVhIzciLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRp
b249Im1vb2RsZXMubHVhIzE2OCIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0idHlwZXMu
bHVhIzEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InV0aWwubHVhIzU1Iix3b3Jrc3Bh
Y2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnZngvMC5nZngiLHdvcmtzcGFjZV9pbmRleD0yfSx7bG9j
YXRpb249Im1hcC8wLm1hcCIsd29ya3NwYWNlX2luZGV4PTN9LHtsb2NhdGlvbj0ic2Z4LzAuc2Z4
Iix3b3Jrc3BhY2VfaW5kZXg9NH19XV1sejQABAAAAAMAAAAwbmls
:: [eoc]
